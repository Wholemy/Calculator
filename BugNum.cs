namespace Wholemy {
	/// <summary>
	/// Большое дробное число, на базе делимого и делителя)
	/// </summary>
	/// <remarks>
	/// При MaxDepth равном 100, эффективная точность в вычислениях
	/// тригонометрических функций будет чуть более 50 знаков после запятой)
	/// Единственный рациональный способ сделать разную глубину, дублировать все содержимое
	/// структуры с другим именованием полностью и дополнить методы конвертирования значений из других структур)
	/// </remarks>
	public struct BugNum {
		#region #field# Atan0125 
		public static BugNum[] Atan0125;
		#endregion
		#region #field# SinCosTanFor 
		/// <summary>Указывает использованное значение MaxDepth для генерации)</summary>
		private static int SinCosTanFor;
		#endregion
		#region #field# SinCosTanDiv 
		/// <summary>Массив пар делителей, в двое больше чем максимальная длина)</summary>
		private static BugInt[] SinCosTanDiv;
		#endregion
		#region #field# SinCosTanMax 
		/// <summary>Максимальная вычисленная длина множителей)</summary>
		private static int SinCosTanMax;
		#endregion
		#region #field# SinCosTanLap 
		/// <summary>Предыдущее значение добавления)</summary>
		private static uint SinCosTanLap = 3;
		#endregion
		#region #field# SinCosTanLas 
		/// <summary>Предыдущее значение добавления)</summary>
		private static int SinCosTanLas = 0;
		#endregion
		#region #field# SinCosTanLow 
		/// <summary>Последнее нижнее значение)</summary>
		private static BugInt SinCosTanLow = 0;
		#endregion
		#region #method# SinCosTanGen 
		/// <summary>Генератор опорных множителей для синусов, косинусов и тангенсов)</summary>
		private static int SinCosTanGen() {
			uint Lap = SinCosTanLap;
			var D = new BugInt[200];
			var I = 0;
			BugInt FF = 2ul;
			var FI = 0;
			var J = 0;
			while (I < 100) {
				FF *= (Lap++ * Lap++);
				var A = FF;
				var XA = BugNum.One / FF;
				FF *= (Lap++ * Lap++);
				var B = FF;
				var XB = BugNum.One / FF;
				if (XA == 0 || XB == 0) break;
				D[J++] = A;
				D[J++] = B;
				I++;
			}
			SinCosTanMax = I;
			System.Array.Resize(ref D, J);
			SinCosTanDiv = D;
			SinCosTanFor = maxDepth;
			return I;
		}
		#endregion
		/// <summary>Генератор опорных множителей для синусов, косинусов и тангенсов)</summary>
		private static int SinCosTanGen(BugInt Int) {
			uint Lap = SinCosTanLap;
			var Div = SinCosTanDiv;
			var Las = SinCosTanLas;
			var Max = SinCosTanMax;
			BugInt Far = 2ul;
			if (Div == null) {
				Div = SinCosTanDiv = new BugInt[200];
				while (Max < 100) {
					Far *= (Lap++ * Lap++);
					Div[Las++] = Far;
					SinCosTanLow = Far;
					Far *= (Lap++ * Lap++);
					Div[Las++] = Far;
					Max++;
				}
				SinCosTanLas = Las;
				SinCosTanLap = Lap;
				SinCosTanMax = Max;
			} else {
				Far = Div[Las - 1];
			}
			//var One = new BugNum(1, 1, Depth);
			while (Far < Int) {
				var NewDiv = new BugInt[Div.Length + 200];
				System.Array.Copy(Div, NewDiv, Div.Length);
				Div = SinCosTanDiv = NewDiv;
				var NewMax = Max + 100;
				while (Max < NewMax) {
					Far *= (Lap++ * Lap++);
					Div[Las++] = Far;
					SinCosTanLow = Far;
					Far *= (Lap++ * Lap++);
					Div[Las++] = Far;
					Max++;
				}
				SinCosTanLas = Las;
				SinCosTanLap = Lap;
				SinCosTanMax = Max;
			}
			return Max;
		}
		static BugNum() { InitDepthConsts(); }
		public static readonly BugNum Zer = new BugNum() { Numer = 0, Venom = 1 };
		public static readonly BugNum One = new BugNum() { Numer = 1, Venom = 1 };
		public static readonly BugNum Two = new BugNum() { Numer = 2, Venom = 1 };
		public static readonly BugNum Mon = new BugNum() { Numer = -1, Venom = 1 };
		public static readonly BugNum V05 = new BugNum() { Numer = 1, Venom = 2 };
		public static readonly BugNum Nan = new BugNum();
		public static readonly BugNum Pos = new BugNum() { Numer = 1 };
		public static readonly BugNum Neg = new BugNum() { Numer = -1 };
		#region #get# IsVal 
		public bool IsVal => Venom >= 1;
		#endregion
		#region #get# IsNan 
		/// <summary>Возвращает истину если значение не задано)</summary>
		#region #invisible# 
#if TRACE
		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
#endif
		#endregion
		public bool IsNan => Venom == 0 && Numer == 0;
		#endregion
		#region #get# IsInf 
		/// <summary>Возвращает истину если значение бесконечно)</summary>
		#region #invisible# 
#if TRACE
		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
#endif
		#endregion
		public bool IsInf => Venom == 0 && Numer != 0;
		#endregion
		#region #get# IsNeg 
		/// <summary>Возвращает истину если значение бесконечно негативно)</summary>
		#region #invisible# 
#if TRACE
		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
#endif
		#endregion
		public bool IsNeg => Venom == 0 && Numer < 0;
		#endregion
		#region #get# IsPos 
		/// <summary>Возвращает истину если значение бесконечно позитивно)</summary>
		#region #invisible# 
#if TRACE
		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
#endif
		#endregion
		public bool IsPos => Venom == 0 && Numer > 0;
		#endregion
		#region #field# Numer 
		public BugInt Numer;
		#endregion
		#region #field# Venom 
		public BugInt Venom;
		#endregion
		#region #property# MaxDepth 
		/// <summary>Максимальная глубина числа для его округления при инициализации)</summary>
		public static int MaxDepth {
			get { return maxDepth; }
			set { if (value < 0) value = -value; if (maxDepth != value) { maxDepth = value; InitDepthConsts(); } }
		}
		#endregion
		#region #method# InitDepthConsts 
		private static void InitDepthConsts() {
			maxVenom = BugInt.Pow(10, maxDepth);
			if (maxChars > maxDepth) maxChars = maxDepth;
			PI = new BugNum("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900994657640789512694683983525957098258226205224894077267194782684826014769909026401363944374553050682034962524517493996514314298091906592509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459539594310499725246808459872736446958486538367362226260991246080512438843904512441365497627807977156914359977001296160894416948685558484063534220722258284886481584560285060168427394522674676788952521385225499546667278239864565961163548862305774564980355936345681743241125150760694794510965960940252288797108931456691368672287489405601015033086179286809208747609178249385890097149096759852613655497818931297848216829989487226588048575640142704775551323796414515237462343645428584447952658678210511413547357395231134271661021359695362314429524849371871101457654035902799344037420073105785390621983874478084784896833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080951465502252316038819301420937621378559566389377870830390697920773467221825625996615014215030680384477345492026054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981635747363840525714591028970641401109712062804390397595156771577004203378699360072305587631763594218731251471205329281918261861258673215791984148488291644706095752706957220917567116722910981690915280173506712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315019701651511685171437657618351556508849099898599823873455283316355076479185358932261854896321329330898570642046752590709154814165498594616371802709819943099244889575712828905923233260972997120844335732654893823911932597463667305836041428138830320382490375898524374417029132765618093773444030707469211201913020330380197621101100449293215160842444859637669838952286847831235526582131449576857262433441893039686426243410773226978028073189154411010446823252716201052652272111660396665573092547110557853763466820653109896526918620564769312570586356620185581007293606598764861179104533488503461136576867532494416680396265797877185560845529654126654085306143444318586769751456614068007002378776591344017127494704205622305389945613140711270004078547332699390814546646458807972708266830634328587856983052358089330657574067954571637752542021149557615814002501262285941302164715509792592309907965473761255176567513575178296664547791745011299614890304639947132962107340437518957359614589019389713111790429782856475032031986915140287080859904801094121472213179476477726224142548545403321571853061422881375850430633217518297986622371721591607716692547487389866549494501146540628433663937900397692656721463853067360965712091807638327166416274888800786925602902284721040317211860820419000422966171196377921337575114959501566049631862947265473642523081770367515906735023507283540567040386743513622224771589150495309844489333096340878076932599397805419341447377441842631298608099888687413260472156951623965864573021631598193195167353812974167729478672422924654366800980676928238280689964004824354037014163149658979409243237896907069779422362508221688957383798623001593776471651228935786015881617557829735233446042815126272037343146531977774160319906655418763979293344195215413418994854447345673831624993419131814809277771038638773431772075456545322077709212019051660962804909263601975988281613323166636528619326686336062735676303544776280350450777235547105859548702790814356240145171806246436267945612753181340783303362542327839449753824372058353114771199260638133467768796959703098339130771098704085913374641442822772634659470474587847787201927715280731767907707157213444730605700733492436931138350493163128404251219256517980694113528013147013047816437885185290928545201165839341965621349143415956258658655705526904965209858033850722426482939728584783163057777560688876446248246857926039535277348030480290058760758251047470916439613626760449256274204208320856611906254543372131535958450687724602901618766795240616342522577195429162991930645537799140373404328752628889639958794757291746426357455254079091451357111369410911939325191076020825202618798531887705842972591677813149699009019211697173727847684726860849003377024242916513005005168323364350389517029893922334517220138128069650117844087451960121228599371623130171144484640903890644954440061986907548516026327505298349187407866808818338510228334508504860825039302133219715518430635455007668282949304137765527939751754613953984683393638304746119966538581538420568533862186725233402830871123282789212507712629463229563989898935821167456270102183564622013496715188190973038119800497340723961036854066431939509790190699639552453005450580685501956730229219139339185680344903982059551002263535361920419947455385938102343955449597783779023742161727111723643435439478221818528624085140066604433258885698670543154706965747458550332323342107301545940516553790686627333799585115625784322988273723198987571415957811196358330059408730681216028764962867446047746491599505497374256269010490377819868359381465741268049256487985561453723478673303904688383436346553794986419270563872931748723320837601123029911367938627089438799362016295154133714248928307220126901475466847653576164773794675200490757155527819653621323926406160136358155907422020203187277605277219005561484255518792530343513984425322341576233610642506390497500865627109535919465897514131034822769306247435363256916078154781811528436679570611086153315044521274739245449454236828860613408414863776700961207151249140430272538607648236341433462351897576645216413767969031495019108575984423919862916421939949072362346468441173940326591840443780513338945257423995082965912285085558215725031071257012668302402929525220118726767562204154205161841634847565169998116141010029960783869092916030288400269104140792886215078424516709087000699282120660418371806535567252532567532861291042487761825829765157959847035622262934860034158722980534989650226291748788202734209222245339856264766914905562842503912757710284027998066365825488926488025456610172967026640765590429099456815065265305371829412703369313785178609040708667114965583434347693385781711386455873678123014587687126603489139095620099393610310291616152881384379099042317473363948045759314931405297634757481193567091101377517210080315590248530906692037671922033229094334676851422144773793937517034436619910403375111735471918550464490263655128162288244625759163330391072253837421821408835086573917715096828874782656995995744906617583441375223970968340800535598491754173818839994469748676265516582765848358845314277568790029095170283529716344562129640435231176006651012412006597558512761785838292041974844236080071930457618932349229279650198751872127267507981255470958904556357921221033346697499235630254947802490114195212382815309114079073860251522742995818072471625916685451333123948049470791191532673430282441860414263639548000448002670496248201792896476697583183271314251702969234889627668440323260927524960357996469256504936818360900323809293459588970695365349406034021665443755890045632882250545255640564482465151875471196218443965825337543885690941130315095261793780029741207665147939425902989695946995565761218656196733786236256125216320862869222103274889218654364802296780705765615144632046927906821207388377814233562823608963208068222468012248261177185896381409183903673672220888321513755600372798394004152970028783076670944474560134556417254370906979396122571429894671543578468788614445812314593571984922528471605049221242470141214780573455105008019086996033027634787081081754501193071412233908663938339529425786905076431006383519834389341596131854347546495569781038293097164651438407007073604112373599843452251610507027056235266012764848308407611830130527932054274628654036036745328651057065874882256981579367897669742205750596834408697350201410206723585020072452256326513410559240190274216248439140359989535394590944070469120914093870012645600162374288021092764579310657922955249887275846101264836999892256959688159205600101655256375678");
			PId2 = PI / 2;
			PId4 = PI / 4;
			PId2x3 = PI + PId2;
			PIx2 = PI * 2;
			PIx4 = PI * 4;
			Atan0125 = new BugNum[] {
				new BugNum("0.1243549945467614350313548491638710255731701917698040899151141191157222674275667586237105943133533303263790513034383790438111630839683950467122437868717113885910240125090400271878810265492587698900097326590601169493256147735238017465375205057482160224800671546421916065803390185309504872266410340088653729427610420635018654295103611627069250641742522333316746244423321370699072207098703216029995074023314834112246097794228388089280968495673502132770041945646986336146335890581463076967731724139795358795386656662819179537793261942914785496979530413474569055016409675706935696663928371666335715312190717451156920795552247950245188855926075577498409251974293047878432623744787640347138208369266912146207672872177598480896808535479860240200665374449410553921906129483307624704054109618643408636993870849489814399002420169943710946959764666316303655469814162477136643556443302858570730282411036798773517590084306609343703803265623095592651087799746736744655295119262176634396457206173120709268354784991987"), // atan 0.125
				new BugNum("0.2449786631268641541720824812112758109141440983811840671273759146673551195876420965745341576687019913638348044900371183742954854209950599769589869606142037352012770873875816557215867159826385506320522087873067501434156233634826395636978085215910732458352381350762999555689011258302662623302599157532810276062335602753610752021785741384685151606926402813351408497944100602379884639426115265526020613960377954442380726047419439178861197772881869907301075059015074224985843941420596860341425179534732229010855054917110869928362888049901695011879013024132239009862156045968385552450318461602941155558055173934151460876059090776086953912728364199284185472242486091653944071147524236298980883851990956557220818855093059314072698304772505805735326340402529366808815266485952166312393776663817019070418622286853718412246494963093324445823094261523861729540685955194161416004202918511826205635826404589877444501689697002242868845272323567371266298861874951824927834531658640723579007836751012604696505918922235"), // atan 0.25
				new BugNum("0.3587706702705722203959200639264604997769756558809157796403988667547031842211293287432644092694253730707840674095909293933452435607471732499075371084244934440334237776862826043732525021829276587879133408039060151256485401995200132158099775960696701860850666254798422086803066661828026576656389549375343693968294996353437990963864529407472764366915668641408857459159166657194578219643904426360701034155128056555127028363716530131928578737191367701790388681742521973506691737285317232147207125181547010332064523640408445039156265687256145076383191869941304324615346890178965911412350228061135381333853163575288197577605090881293573119904824600927905364178221432349713289505774886809618608761690374037807809717239630673399751165733161890421270809361862068888103682997085376456656829713414897991767394382854045176240860396860660781634857163436407577287197215846742395658256994222229702237440296834748475336923330723208497698180644945928926936749810196587495565211514710364447436766521016364017501069932298"), // atan 0.375
				new BugNum("0.4636476090008061162142562314612144020285370542861202638109330887201978641657417053006002839848878925565298522511908375135058181816250111554715305699441056207193362661648801015325027559879258055168538891674782372865387939180125171994840139558381851150950216333064938721546097320785555572086014632275652426730521804574640086974505838973638964890026486877853780128236331217164578146836900993340528882486244562388119090158949767997197011496776001645006253016812125609335304134939663012931924274840293161119492061620844159372361273166876981687027593189510333973325929038512892545945922463215609783638009537499320948607339491864325160274827930450373317725546504996086757706227544162850222737237119744733669773185106940138112699577792562748256600962116726748115272827225207225972684215710195877562091701557768709866542668903449351805472890053707838124212854794303024371693655356985060376557519033521373025001686583831500076275662738602296008602550497753076483949038499195349148916539371546726344029804359474"), // atan 0.5
				new BugNum("0.5585993153435624359715082164016612703464475825340148061336360381417482360269765762752961879315300670952690750356440312368655628152976470826313006629619134796000916184230290428467590383019240066947973592875225835749738771358649309598662069922840042472178943376277598394596290830244683987588318908344464984501253593896529198697927742212014796530519166730221935374372995790698365389840982922333627610561873293238352005005267791166346828524229098487223291232405465910857573619792364416350555938507078281426478558474580151515067820850823583392881219147382604391982828576049193118690901521042420670622932864092468770728577046919965900211266396566748056247371027761440631778927945032560985516977438825920119479849368257095903154475641808947819505244535129298974398854525910232632392078631020137557738215546048665365793848448460076527018414504076805763496628066421715901058462140569054179883389650940315459245762246816065495360854925436549338354628950437656440970176523424256592202792315481449928245558677382"), // atan 0.625
				new BugNum("0.6435011087932843868028092287173226380415105911153123828656061187135124748116210887128168447012827488780143387542594782965352859415252688049196185641760293172864695190212090574877743103356228664314832038794490132598891352282127897179253636709592307243827810168487424299960076991669955823864271981155063769473989422428660700458592926866868340678523848083755391543583990218414946038933118748078649793074676161575590617641865924936192886669506962235580234338687648595077228489549437598592291141234473423410184243570514964470707560640978012749630767131878636771861994619060096373991916996942872771071006585004198738511638820410278536164133087145121550442514332212332609354695644422226409779487158956827278163729566680368884405164586965302554946949623096306362990402299585539919521818334906903539897078477437702564191396734614509000595486616009500061230231266443966953503235093062298424152722260353994003397476853228998741211427068516572883480880981762085052174980532856416223271281422231946740168745176575"), // atan 0.75
				new BugNum("0.7188299996216245054170141515259046539514191200183170855427796828611200091030244602752510405501618942413433595540299186477399954267716694461503330175139170475518591803927529015156070004822713051572881195360496757764212786217718234944460510787841650114523074406697918036335012606419843699582193485687300682516429911049499213755198311986967918476942941704735742828382517489160929153727721456216702154593484964450522512566393726289528171297118573727635497737277729068622473065045672072135524359447629416465903702074946089001446482314886052012666079520005441751776159905913665795993509885492281296647093586929160458481673853309063263076662452370160115509585588716636459507323978570300784347516167262145164908754118460284247029399384192578658036744235838508173710796408732917928022497364544810004574799575970692041889459979940878118378392517139797418644492722411236644201648376650659084218534371028632913618689009228709053459225387961793836086918528305971689305805245888402386566199711810167706811485690701"), // atan 0.875
				new BugNum("0.7853981633974483096156608458198757210492923498437764552437361480769541015715522496570087063355292669955370216283205766617734611523876455579313398520321202793625710256754846302763899111557372387325954911072027439164833615321189120584466957913178004772864121417308650871526135816620533484018150622853184311467516515788970437203802302407073135229288410919731475900028326326372051166303460367379853779023582643175914398979882730465293454831529482762796370186155949906873918379714381812228069845457529872824584183406101641607715053487365988061842976755449652359256926348042940732941880961687046169173512830001420317863158902069464428356894474022934092946803671102253062383575366373963427626980699223147308855049890280322554902160086045399534074436928274901296768028374999995932445124877649329332040240796487561148638367270756606305770633361712588154827970427525007844596882216468833020953551542944172868258995633726071888671827898907159705884468984379894454644451330428067016532504819691527989773041050497"), // atan 1
				new BugNum("0.8441539861131710025178441482716475065259427679442211013872387110443983219947448076594637300807608277345647095776165164623213938544648407479067374181062958189371923896587087599520262267656327924799343164677726505567129220448546468008443004166702708856253922793858142998557414615826285323173948931213795835067122235563963774791078290007589800038013267023487128082813537012985275554347768518401899309510235455848559711414669497422017930764887583292909922979883773684647860520783240566037837676398265299656365050116801333468784212331015424450043990645278287691425315957612045337762096914959709058919955614212479813188669214478507636796947910514899126219022835421265897202063864407325133677617272413031382558234742433192122348902900612599202993300455275152174679702398936282732399648927075751501095245138350878450022261993805060926037455022400773428269535303602922542833249549118760823876519161885711317059354196746645320838570384493066077042248094708063885241440226012286326006758014470790278284769457018"), // atan 1.125
				new BugNum("0.8960553845713439561748007180299378270245784448468404873665505911845993073120509634222375957690172401070482934259037276926960356204657707110942199901811650216358551311460486317933847578548858561153342344465234602633124154627579462870665779352391075633442795019698692994021772876112703753845005959613520749441869908667341380096822251803957941403575661887528793156178887304755001723803744641719998030353748524392661300983209407116615650442318590065486129770834082500268110810678521766699431716074177828434010324754538708991819136799130071861056587968455215578809891802922922146342814177857683808362160699312046609872772335784119259672487989048878781615999793446640119391888776851815908734077031906261924702591859825248639442568418580681636674471746399905582195013297122602268189963752487178420625693874063298774298817887813110954680115039507214007501389150123709511526226876795596592755934738173796281925345818131932475436431719847628113075777709257748880397892538335273285618169760109251835959805098174"), // atan 1.25
				new BugNum("0.9420000403794636647379371705345935860716609849364048276585047774225646767975576525385299907874705335445476269516903155871721173719304280383338168815833518977358854812150107608033940875316671472757728733086700284631677684738912566649592696922240849811691372498317624518360678934744609444317788288302465096174560562296353602751832157292302126208616659401622250888777524436722729267760071027964811205571365793465335220721068086624792958445676643600067359886261812095014717476483430185520118264302817181871425515356448079531291562409938452908443209121971032184749686316798580838560689052115708948553325454162133629438699849432854309306273798683686850906149584391270612980436423416954835366946272303855342759618411736677874695806454525278451439941215884310364058029931863598068666115324783383133320643314081772593802324281078230405111442020650297722132856897558149588286970815423699258392366983491255122056716111528568498915240506601721580948095734867310721718546135431319820009571014542023271064258986762"), // atan 1.375
				new BugNum("0.9827937232473290679857106110146660144968774536316285567614250883179880715497960353897065343728173111081651397020119367662299410391818849136789053472484235494147817726770491318323960397742899020583273603878671335971023143727015051708718571210491998169977354955130446955702784127146006523683876273342062466776900806368282133137995154213438054926807812628292425427397000064880451978671316525389183601537605889851463610006587304844108929670609461747816445409852787868266196733907637534556483691934971225734289648528539944305275571864940208939678829907914401690171513981866053223273911088492146839396825405052362766323426064324358507583034942017996458916086544160540934437178400944729494308355011789414740264042496022026100296206899667810610882537290412500556357100041485141188151924426459372464994909185716598031731645809069128074695474987271332549306689302666145823027553026801195294279965585364201776157014948091263559416833633955224579258516048563616942554481411042952579747330509894755662648873578599"), // atan 1.5
				new BugNum("1.0191413442663497346383429170230636487744033691263135233590112522484089372936243652816610823669058121055241116893731976513469008807070000304792080431600173436853274486821330409554434619975765416725681553592122748578071670334476607321101475619740404977321629213216532343494144664371822398336851548674872844478939814036384281078242051112951985731326039946735833549891527957373419475852384132432315276165232369508202537570366532246138543594068168545793665469129102486651966340157449249757849584970278280175304638664135995525014568129193119223668637301802069983012220219304025253701008605379942878386334268313421496970794333457295915883818027076340337529945973682054360387392313572609137481680842647716300084850272572276491047849983198155896145080934872213074196646196001218801217341509754439910400547702459846999562222218738437744612607731927521996549242030814768842179225778445777225918144343049266709786149636172169824914465453215041064389706558980974532400652395540554550052629783906548224544261727507"), // atan 1.625
				new BugNum("1.0516502125483736674598673120862998296302443003420446175369802965561179957590501692249111622831291154394387558058200540708227994472184173576553049267599226300296965448388002302528865385251103809237175109940165915224032026095488361455055484174245862526701104212551793508895584826880616016438439604639958582888654029784298828244115289574347180421795496089024306500895983805028228500772505202711052838995803958888484278112127924083674991489225505422782547979271237554816944160460789102831580273820381681034370779904507498282515808276668748871034716792495237001668267752732720788555773298097555282588209792449798818010231231678895509405581936478245044703067303040051948036199875966047583682843506401613547219242391478757122207691064985736713867298682864050152451783933722076649422541039035163761177273965027234132087757635893436342318681789861681884562106346686894234011476072532727844541411767912609725323542639464395934023474535897012719924749944589590583591635886089085149233729191207340382485281046058"), // atan 1.75
				new BugNum("1.0808390005411683108871567292171998202702965029251847762327204668191979639678203061649490973336545512634044342765669165749559514627851711619447057828358330883225878765758059491096063903461973762010865646397919875461354763372725449894977745394534544629023480133091302631674249116635741721431102930640748070810361826070719370364033122044775967244724016212760134804168451447984333053754690203707666330126409377467067345864926582572864514117295225710990590254281751363776148876587569903773289331845595287627458256977981543358704330874928586099927927462634826698789540604149110360983125000168210027230915312134537713974199622586754948888332219647299814949122370021198236624855684275328893486257416533180176072389594442016964407710627079187597496193051491068975905523778095659240102696427664620523243237019267685472783744615326563719895429635672354342472030195920475937595638541226316190784387042100432496505261563301964066418743836706867550585991562155160836993245298357999770981606209364631407523030857744"), // atan 1.875
				new BugNum("1.1071487177940905030170654601785370400700476454014326466765392074337103389773627940134171286861706414345441910054503158100411041231502799603911491341201349380058057851860891590202770663235486719483370930469272505464279291462253069174093776267974158394778026501552363021506174312455511395950286613430716196204511227003300787433098765840507305568550334961609171671820321435579524185770019741419178675560920723963709707800815692933389898166282963880586487355499774204412532624489100611524215416074766584529676305191359123843068833807854994436658360321388970745187923657572988919937839460158482554709016122503519687118978312274603696438961017595494868168060837208419367060923188585076632516724278701560947936914673620506997104742379528050811547911739823054478263229524792765892206034045102781101988780035206412430734065638063860806068376669717338185443086060746991317500109075952605665349584052366972711516304683620643701067993059212023403166387471006712425339864161660784884148470267836329635516277741521"), // atan 2
				new BugNum("1.1309537439791604464709335155363278047493277884851631331369190810512975503874030272444919990922135440225164724544036363252928435629809126996924633454875812695010975212615588064190478124254188022907382657343858767532841556857309556069579732306514031014581751056421748723783503074013349367853674609150283238663178062731051557836025534870250324369582956673399217703620698534350458220232215046076126241653268880747558800148443179605944284284342663249132833828917728965535252290154980647439847838618740627157733872371833402037027167668026229402874064264393427817752410438641961572330357335723722661965091497971983405590345596571431438535044825395030864026839119782979685278214581451648785920927516631149130578755412241530950462926054092070729672410148250477091674315951634796744420870926679872597120110713669628573698319982642630659786211918422936936460307970055595702118546676874255303554915847996903113863670437194468462247439235153105289470314123318643235217946054923860521133297620321704663916579572576"), // atan 2.125
				new BugNum("1.1525719972156675180401498626127513797494727509530049722227043308453495707436260292077348243870038902428681584970251677736960391268618587682428491565977508581492371359356533069047540963920118598273406538663032964975915470652977856342414917865072535607192592438481967793609422984013031822919472416133114922905738008529446433783679445843911790819537593472903582524516883821748138423444973217372985403709390343852086603093061125497727490917340429398845967301326514631613392776294687559929527829408284780777510550225605712167951111194481947612325576786965893744990919826401418508159973602552742087770342594003750757989368480875748491308339369594104288879678074683157406671980510100117138148887950165375745449345409757522557430352098467834944310835717894175312843911767363874848394976441727311478399245742640611682195261799727717266081804985930033805619722876451863547790823821193989143790227620406696233063250314310906576347600438123032718029183167295398085747136062442326071054875373104912552412734551931"), // atan 2.25
				new BugNum("1.1722738811284763866005949441337046149712182069534245947492420921077508479191255071757347256384777764768945089924187934013071217842450822879020481005024149766399496197173418587865922279584901616657599871222632247164932111995076739626658364332674434760252814016892876998781205899873773767474628422084115129523379211902890925970797419331963081386979376569058968754416763036709040933099917252207078378932867079218618906365318975173255220766433873197313581092639325443656452211299922886205273729215318551249839178158799188673085434383655658385934199403152906956514014122994170644342163388034160722834074248932793358090738074504737274462384225100030820923335496083827459483602612561999426358326230446024560365225306939590298097460357631302248528264635982863039360920936366618257762208084208774194602025402391138145331832769992028056768698651292087232017664875822481500133381832536097345122032224047740933606283143298300074341201657993049178601752503910300615317680038319616355207553386801348607091602433653"), // atan 2.375
				new BugNum("1.1902899496825317329277337748293183376011789860294520729111666738297077453141013969551539665751855988130391859302154743747313466319354615234274728559020503605072859278571406021332563515337674905021105549141110745627925949373956945155331051218035151840424536373824097466040954338200337216948366946768225214598432600588617186591032153780195435310590041693829603845479446856923404925096053209698337131023174392891388176704045731505765990394947383877689070409240251738435280373585186071350226289357087607112295378316246109119007167810593533360669556055131351000414465776986728674067587471629993063065079583289681771144988081524746380191668967981342377400131011779326985271314412503451944313581245777996904925050145067591100154995064040948121756535518001398534129181576270935105174816538418784725076938012392953713797141451157503490976701754732241005599240114908082024897877199479501455358773556853456353978172332196097591621499759085948629075571387465971352683492825489602207641692726952418427260026466079"), // atan 2.5
				new BugNum("1.2068173702852525303955115800565576303133259679057472946920479842437380864249134484340297531204570130141025774142777147796090311897134368731814512062054188408370490085992343680193973781000005527026082313280560741400331022595054604501521437837856740749692879747425084497572455717754457767699986370901730555827248591578538785213894030733979798531368884060444876968676807284741931340779246755818896130872299213011248619767281263885784970858332717430856509447906969143805768396407507790220137575923594920862778796335810398961776235472158823747488449511566136066415462789244410324108295409331448249514242054681725298566674089066175771679801626736872674599864016286513179388839126851482043920708955384759128332839889625917649814566735901193948257679263937507637593236266360053458048627091317413832172770037073051736943816193301495929352058510099575243228089710724127176073273325367613070433364787401815835469938687509025699204362534049126613745764470004320300122383481558461071380079292699000750346755045348"), // atan 2.625
				new BugNum("1.2220253232109896370417417439225704908829783963510137704750128475956615721260339505501996485883072513369979571311258768851225322003493431902641090581394873718708751898192370600139614286823923719989741849032969135331061874018954029942318669947196983251482179317083808268919814822922674564044846664609129936419418219298919977411084902017104482923406630587199271344432560166377047744794913159321480770707811399125711635847930084211696163234142740632976450008589939802203393822759361475021994630683905799667051833849126645814484459127197323013258429464563293883280963646656662932315977400454528288688502516455671695871471504554120290656874574363872945092678952530606075490339423788910050728458955598553611146806345760038627759434763539155150775649604494682183663035153277325818026548880505009366145911772058879399770140789259947519675216530434285070000984703037941949033120269260051776766656635626832235964116483286738763226362826873456923203753147381717781919172806665306942534787096503729415447255553351"), // atan 2.75
				new BugNum("1.2360594894780819419094519711090786987027121545986620960743165858619738801664295887971560071134246599947623626004793993271587318851600309661784053097484285751287916798416693315745278996226004664455729126375184772038805992256493524124531950433671374115378409845528174615881299873274442855651404693319439087560385417846605746649441514311177710452325730654822944067072095682718111415234917462905909542787678698854812210431098662918056882754234778897355773245901368461070603219695215601242373267229035059075582057001976395730059151919275095178922682258400610695020222827096527775676568765064279681022307650842262212583188801584898844612440827773016326927678995145591519792846416175506071134843142270497528765103247341700997871697196292783623422062346568028441667122374673466107779082897713936324257887273397825482298658818847843921174805918873141095594671950055444880454697474037767550650403829030140056428101620182528702708539495240668960975223022525451243834404639041636364807287700432978162526022762942"), // atan 2.875
				new BugNum("1.2490457723982544258299170772810901230778294041298967190546692367971519657372939549576089903204171595520668738795114141752792793340126567134028704219762259000819072918403647318088926671436630442494493802746809812030221554501314292579307097471559855923814337750373589593072233137406089056104165255128836738198038320363610524178308141380712100119314897797585256028264657543536629313140361360720382661509827205564033489138832498462490466328305484407802623202968075516209222514654044825159994120297823033944076245026945800980076326654242969748870569944959986332582855386555833278887803424902655952811522367500741266470498393933789588631722404473307410672350176098339820089802910536813650364217818967880978628234997220460667601737878608147790675399045001649412040855600207221905129340587845206894131942354256271015181036174205958111243523415420420400073524948087411099185852176428458968070894563516069394199123470287298505533121906704280694168273104623063279571858253582432728120490304513553316796684880524"), // atan 3
				new BugNum("1.2610933822524404193139408812473357720101480692071796272004287939073865699460240749479747583939921633714808578145542244920955664993094368092548570041715076814649439448213167838722447262245496215905530917369341948726590678323042986375159952337140725461359142506796736226532987563889192082102354590278523039778028255827241377999288257997835869418597682412256827585042311173258057062076897602979783309699046938712707188871239822626433218154391149636332042379383134303231407818245728852316857547210959927375686333140361999803374589254248277748879221236543413441290741319408021280817514643196919767227010961625367071514034355103040622221537146098466765935877540105338092678762808181369063415850154297215373549759019795404567309878780301842793526059398845329858310771264259977393249192912086811590218373424112913878971093074424222685798859266772863531159019031353692193686969957189432219727327160366208019295309380284915438221454145899301401004282954437723298642027862374384817404308442981052931879909532235"), // atan 3.125
				new BugNum("1.2722973952087173412961937498224804940684343058664604656945736374448560011571679354883042665848707493245407550592103160329100908743701318824484813866569179782757260891571675572371600451154301966209013127851844726296880898185593571698594855613707466977864680504787101524651669690166413347582784938558967296234461891710247972114365374388712484928484010521596092454863118434436319103779968454873546145550475654462084194880563299241986837886889284161105614824737736313810347772494771037528312567846715987187927095026270168154846105205771535964873511520806909305626160998347397001314989868201256160864706790844905744799256775116353083571648236507302885429972090025568121141409953753198429666502285099266553114210935504336119513678304530823171655882263761798592468429117721933715745952765422179070656916756331052267665806995049491207025311318774176492575580040637585398924939898653303021782799129688847033673226397703491622708914698854192707117279741627360039976847603149972477885489725216109087809398716678"), // atan 3.25
				new BugNum("1.2827408797442707473628852511364955306249466995831452607528633556048379705220104705005498503079892379982050691813744965417500403420076476511946802120807320504190691144003230096175493655005379547787611735863108250350202388396213993629470782241290212993506419598552831201767601080633978071698106826074844067563557893024078341585330187301188886024805924387910286414984319638044898764406202247832753196428929065627435574609093023399467203855950569146059570143589911698487303404214621399740595242995211686965394990037476254923436997393028310784963690799439793548026521191643093237749838048887852056200360000867078002781803597200877273503062372094736781250331404292759286222675094285054428667221230836455261914991903525838191536638166780506945890166685639509423125070734169216843516462261083292711702427403736933521083560954822542657331277358894733394478128396946991406886264699833483869189718882870152276626820817903463732532137438698829492254894491631088664750390964509588801633734893801065600469966781714"), // atan 3.375
				new BugNum("1.2924966677897852679030914214070816845853140841120018400484685905645097047468764597557491886498836817277583251440988655976812968446477392202867280471411564266749798792067016085129311358612147579329652508653384265574099696046350306502492534699707282254346455282951012472222068196497881409617822928769908049933905582118981629546311501029748455966786952055498549642411341544366497249201339657169107849885724237490585219095112943148262621179277277637077143402781553378782625675090672306695765835639071044007771682200381227717331089585423907314485562182270292967394625358543913408340158368669319410516840103429836330535709513360246742075286743965397878873816346259708966525566325511287286146466255938493984424383256787266642790648291456766885505351748116973291582385527225155659792981269671219538857017354578806450037287276158118000437882437967078103506957263445471971762274988862534096355618030966363515222236531986443063612591045493695445423791733256946861605204579450367469616088512816349600946083914132"), // atan 3.5
				new BugNum("1.3016288340091961438047858503666855921413660746154170879878984529458935960422882606484396855343217384421956455035470376781723073992008792728712211093421519872110738022769077900161327731528608052352354361971267296950117700996929180453504800259671788625307963062600000449486830261060284847503932217759878144579445190603154800867164655141457223302292151760794343753775513971194537704926242460305071681811036125595921621976741719329607916404122204389976444614835869375421858198928797961333565346721115507361214172286811670323637086073343366602433289632769945784917279990499678113633065376685450062695024349867524639759045377458594976057178841432407442383961328714360177811215838634771378566383146049461773716803715299902444503854744986513798860496217233981277125638365102372370375789668536606871300931708335584292070804304726859922708319481877489030251880129110442514280186721170982094939042707187175129382336675168941662371945330838522465758459196419236208388675799381158042744529422009253766908644658709"), // atan 3.625
				new BugNum("1.3101939350475556342564376891719053122733264615054634254786858740898883093790606236162188099472205080255775363640300928452493545199637645247535852163477907006288945767337883668755737364507147331663507687222067762689022101515790281742861904026928076802139434462059720101809449804815547216847720351487498280017743572479889165657729434220708582510344162423799816965478001671981138203554248593643068226697221775748472357770680594703117823777303053327423872237471701519001132531333286858006278402178144355495266139774502705126363364267813172086408081943266830374663861465655351727460256274403368459155023740795952612306510918857431405512972616868426923627410912846122088630848854781082987577805483195440989286574133512708983125719307708717028800217610066558029488922420605443464669947362298532921428239191244865589590077997852908750794215565165588117128862331419571514938403898148339919958174337074022035162689268656367692005821783375994585573178398460217383034821145168026055753957991042826208882131179142"), // atan 3.75
				new BugNum("1.3182420510168370498593302023271362531155168459560248059865278236828213706426746246045966616033240427620400885849969039273861726258347892096880782780591048543757564392261296862471693747922114877813399516473310408295434428296926675477521773183557241156113257983406033048990575748798319038055567267247911642967152545339260194769375279877056669733525008035689550187461755566404046647736294841118359320768092923534758114618421978750164145890247337695686844940165465908556954438299679456348999116075355340625342285628179538694318530816579917012260132674322725911565955512223055693532864742459281301055871545694992764365184288765088133205434046142110954720121880970198614729957600318337356299371525496859971171237487415765354766916340475419986421351733246203374331445752462929516222104337718383783351866196349526087169313388314610657456620979073900422205597797601080528130203307608033041535840017288853300917148341228897180335720296929583523635571299800086421369182116386818663408649282474738029814261321415"), // atan 3.875
				new BugNum("1.325817663668032465059239210428475631184440601306368843360096381486553083555462402739483255002356542627239238766604034949251436883780231138903692743450036823523864963963387604831193106328835926833138773427098737689551099700755184553195583061044527708737586148385430218736326037493840434473370208817355834687269742882433012238581886342946111885165041902611154330211255205036421769318080546923368694408678733190944807191234602175172571189017709561829166531329682558876199281800816676411471451138032751663831331189509241328706721892483028111180694048676706570865169665011749591343344346177115118278897048606868917485025871336284190280106058384658400042136485611285218069600320851162787437010940748973739689124468750133103710601539958499333282253345402043578472079026404782555249647309148163959366185930612140388503023957841988816571817246190131458011525489985585427318956151442583983627127668129846829201630157044990090849838347424694814547007609380796398145437100221541045405717288837045128304016317876"), // atan 4
				new BugNum("1.3329603993374458675538498697331558093700184482265016816314299564474914706173785751460378393854639000369957231215524390139158578756633398512233632990857683973164162133413238312944955203069947606033677373144050810272768631418757299309795623668127367387527064072140570372431092686711745818365584475456801048457317443443429486711289135181208938869696612961905596172712842503462097700672458605201173052408739044327093120456044810008812654665796041730140013582242386727861055909280065149790416116721423702871376725852828472680168604238383152423894217537499267219893777604939849478552105276848491277069998147647863168086331074498568499625920274440320195391750138615986652816635904081340737550245130091085492063635441363087948409358570116579354609750731321754036492650563033228074191716821145162650508147964645179658806491252688346015002100225667182925181047011225401119280737117871481609137540262699524478192021090822020489689740331559555371055850887880033519622682678258487072146988497276473406238486689755"), // atan 4.125
				new BugNum("1.3397056595989995393283037525895557411038823004464522672715892371051882283801441980383787246461984114323077298810867108526196814099860608223233044187434311383357694817894464811881169953360469036101473196221112543203496868341652608994518617759311659078922927448616264050180255379487704912776634024271483138260129168338161361066389707087304564855566393540576971885968316819727432068973223689638007200614040179612877501462800361614794697296333901802315718207993225670077477515674931327547124721740229739718144156679234526574508917858372414209756979503954748172155599257175509016689697172583795564734875451585561450954745438616947092616308512429376449346343240951798786580675514428920010269583674011452903014350268513564040475373070296028836126005853774343322862769949552851670796328533250529713555328154265422908280931222584106296516796591077265593510708836567282076117947280088476804846828695083321184924399391638475131924750633046742918193755085845685152807672551461144520311236471365342987575571104247"), // atan 4.25
				new BugNum("1.3460851583802539310489409282517796256511899556135352150601148911565626281518869515188407601273582901127711524902858096656092592637845411132488534173387264277276423655534575554179869966548518385248582210790553199730949387115972713139772185570600072677344836638369779567734410302702026752844411832200685184056567304311929947439015479054260715562797842880602393719864626727613846521428778073956114650591220165271362161563663145292648446799497450687072407385344908873440775508472988582254827539857101649098117401184678875630918722496599197963878791519011114429881272269212546639175120299864630606901551964119588013708304122470404123652225609731235908172790880050463740481358178563444079837816647296452695667973778916528971258519393479461611754487943462126620611250687265860224824180513989492326231517358728858464532048377971450515528113017270092733321751573181910353181186610763755223867940237748524120293945361114589941970678691088721917560123526604602191861859396468312285890557074663673626855429565465"), // atan 4.375
				new BugNum("1.3521273809209546571891479413898128509841917437826167138039151221010654585650048905879512863548726327983789954954874341843365895441453399373501360947343386732070828725736708147418637823061872225803893018342340006898435525097079464811071861483884890853130407852315362577195185570758174019252885770963526472266846829756911539454884507225192457175476737774960580169764422037959408825196135006945199289521298678406090433848235132112251095939164833787887562414514848429398376565909697471865640595609498813540531360108469993771431721857756689448537373345521209755050079703541374472388157921761423710267071296437671147995037403050690650351689381794779053640303323300073311132070712821375613400576269658118168755769766679821069803047152033856546874252142352421287078496010744932204599810708919800172407402322060130842980560601157185251395650345335046825760241958961895203611505563217063613846159064281596485114576840152862157032524197155965446049525602165006024017197291001253920118980498444801671134601567435"), // atan 4.5
				new BugNum("1.3578579772154994751124898859640585287459238340193487417361870858228306714292169463534262738452045146389634122680445024345518005316854096873660998804442770455343746926527060292895573165245932987078518049497425883707037470603260993511958624920504401090848559160541224880492534226868725316121070174955622311113519504604789984412093492141761390035085413268418912025219269545708238023664147268816007612922005812213373411842825527406027625287863421821354280207429403873053609933301796494715968867844797742392448676542099231601736235990301996439472799897293699370103747023774538792338517315854770184122245631581910890643759349262283874037058356444168304681621354615886502920144089825917882797106707249962191573326984161334915640646562417307268862722472335175523927616862555840542983464742074904952427135534101347450118906666276776984300440835437651816711550676898713268728725126719135003257731273987001216681198229982660474436504268782466964234769225634671702329150358592880284272940427665221388742335481273"), // atan 4.625
				new BugNum("1.363300100359693954289298527825099118994283167289729394337730710642188529378799137748569980468690246286199997028437615715045516712021714506114112195410613747632637896170877790251919510551996889021407787688161546867276442499543634772232143581881285587528106141592365123271410142218673627477181057228020587511350123735760582095456760524738889007479459277392577338197420586070114938618218405045055402856159678331190423126230703426892984893872104339572011537292443594357875311975121508766239709349294336427116263702449711840169851102907865170269522736368235540827090090096520601509008554023624611467877148176552163090475578693854098410515492208252226740956287458572007393301472118920440524873516445771245304909213151508010994553200771766155727487562896090461576397521521419794786735764333924640399845276629876661521123889942483718145430467789745641963253539337601127797725502163468863994144727082745812822621048127385887536510010586944809933055120201668169750586739084369102985725951460898406273876590176"), // atan 4.75
				new BugNum("1.3684746984165928776366381936948529556190897992388863615567244782727077148724510630507231203719685739729138195363256674419282260092040119141999107768846090839434123827472377040400203554250855677231369038075032759311362815015229718533156276852213170705935530347592988681414976409248882377793448120272287366358611794141367530516832086825957493963517383648970381605519038703953583996581092283417490644091711163945088603622555912229385129664269751754192121252912122055558519978272902426054922754026556155288129093096493744112390690334859371390145365756072231709182860954230780472398242552731189742299217251059350082393291089540721595158979198323312149171472752359092548875147860009037730258790524285548524689597516637345531857267095341091494026002718186355087656440704050807118004094194231724760924614271149889328503989400786337436080099267657621720904911930502747425489028527742050808754428802174752442186648604395373162366630052251779564046628601335371996963740681031494651629102093636343930291543844774"), // atan 4.875
				new BugNum("1.3734007669450158608612719264449611486509995958997008089697833559128742331648607135813195846337704898784459251829497932190904424179810517601151142088479372886729313043494047589967736936929218141394591129337410981523477702236552310044682302529042016148615009296795505658875623322715593928370575595217490467625648740998629178473411753007781350761057420130902002272687978914235701520239064576750377735533142039676279586933060886551771434823978986540572665148615061852355558405235507902127725844437618392739462901689764980517869588597157755245850100358434555387599265062262768975551731796568991668123713084951898187266050641884034777487648480050805819924324469146218252713547698177160788572587085880027186301107174818941564410273358468387991340773494412203333946985083514846609183450206488615531125813203746085414183456003200690569649072190460617985624521454740639135647198684754905288563021182184514400240075196269723347255194402542001581966764146537396105627884926112799575453871829943435903396483240431"), // atan 5
				new BugNum("1.3780955681325110444536609641291551522494074291887068401999728970525949425607016650600251534242622325190015416086622621888249454400456735055856234955740291800231684185749963702966138690522048927352707549511196992950826892066844383095890744877033962012593775353315321248090620691359862406108651289555558583755797827332802245086682370526349305872292198961639515797290078027089780964229370945427269179807875679865616839336508031764267130540165492850102493053526489015336941498562827757036243180980169537505681635321472065653919827211294550238060384928477254939535428103799028613834103442664155747485694301382126044532001907640156025723198450048496058396683554860354389209965138133386292059442366752005947160575813395452832327614808130024162096880521961121341521687724632030969815674753589388028055274801043214641594865116416059836426638675478965387996098653839836380662761193254023664292498523209339724433721723323045995945649682585940631312819544929551573790186791924550353648516543610716538984164352877"), // atan 5.125
				new BugNum("1.3825748214901258580599674177685685125565652129903073848100286557962201513814444667013964930867089162075478720748635595354483592277948868307305654875846874437620617448795519413222242252457984704686450464869319292667900853513957818329812523586090548954444697320214280287451191190869788235517976449403048215544015804490046159626595511573389890346771721533819220166179177924140000831001779116970978324396965176635857064717106483326028695202191646461635758016991760265888360980691396880880191816782989774748939672039376394168574641612054941285848229943324981862640663877280492339043048048803456452070452707016238459110662315622362282628912512877589410168354977343831654814733685778904009993681765274798732262028632250969355553894591246494981797870054093487024900187151036075384541251807972784918808468057306700365115522677254815415197714345867100322315945073790627698060608887118079929008288891431948275120632080006568694241766589957613476370552145880497745803514290880223261188026394654831262960823022871"), // atan 5.25
				new BugNum("1.3868528702577214543289381097042486034883360483144630023436349481539560536122944930708196836580957896016538810964897536520653926591950178122750529690220740126071131293016494555089755272095814506930073297601580310002030165007308296303531425898570106330898740294146239793894386880709157785992586404381465093177618117312483847966602043564218932754558010366711036666036716731335726192927911798325831183970246651799452476659170848315142692121507855846866717769085287634060327157894156092427390544629331838957480726292927914869124162579475333583923151954686620133819434869069227651578051351500223493865290058768128290614641677441463742108308174509586314352816394776243663007179848992269669813002979174983660887957119045396926133877108907293769771280873991716175719827596259822935882215951910561959488115096521166375712493428583549444444534933903954028483392080923771581428874431128932553298915152056810201744213723759200977724820113680421961032502542834985420516425318013279560991470463561735862908969579613"), // atan 5.375
				new BugNum("1.3909428270024183486427686943836432060856111628583607914327992661605935924972251159018008519546636776695895567535725125405174545448750334664145917098323168621580087984946403045975082679637774165505616675024347118596163817540375515984520418675145553452850648999194816164638291962356666716258043896826957280191565413723920260923517516920916894670079460633561340384708993651493734440510702980021586647458733687164357270476849303991591034490328004935018759050436376828005912404818989038795772824520879483358476184862532478117083819500630945061082779568531001919977787115538677637837767389646829350914028612497962845822018475592975480824483791351119953176639514988260273118682632488550668211711359234201009319555320820414338098733377688244769802886350180244345818481675621677918052647130587632686275104673306129599628006710348009241051467838412363808645875859264891601067872071569463080862554275385926384413854050258165178795443909864051161483389030268170458906474305675910631243705061844513023906717511449"), // atan 5.5
				new BugNum("1.3948567013423687823948122092044222644894804076530930043766793813954564501957785053735557774027965725976375778930331446675188515859149050630750441367810020016551112047102581448112641617526744475451025808546484659116567841493651352850434871658412789955682916620339056198001527150583590445095476522625287713569062630195169577562889072115003294328694584032053959167579401006770900331369809704426514037245206014250845865668490802508983516146809826660278204134075384205613939256266490955017987123346407331280503396625118508418341664005036812454316025649799432203702545019341763605810417361511465131587343069062347268905048469981928936115248694654435041285144491963432290624884764227916981294711245550194289027025415299882590675469414215501288606874468248469209420775240220301018598100742773009212486940511360161646265141433837164284864625262653533810270344134370961441378200846490374422692940102188083865488733789951831174338974273841194822613911897036779102380919302568287944116264657545267835006866020104"), // atan 5.625
				new BugNum("1.3986055122719575950126700816114282335732152444134980659487452905210093538878717920849307773949331654827785467464775632182669724982447573465708110336142135486722936162843404467144236911449850729103052227113119790960680167007332687463245706624605035069168762530611864546797366114308792481713451501559759149245345385725888085565814555185921926961705734967860828814177546556330335789554514027428880884447086523948427696880049124792032926473588639862471978755196112752260047349213126121992465901749646755098866383094938235857335644621455595852684411218286206761129660598303460707063478326830848566233675317273000008268442177481104496831340525273276304394631897906810145216878114970496025734463546581258360662098273879544657634725253471210416119819850629029390208246682393017989175289369553032775679298325108838799825538453111489085532118906985242379931657948200540081097482653916555892763620042754047086898760942584129558560217614517228389096816021557889280456476591946973733619732768268596532860773368634"), // atan 5.75
				new BugNum("1.402199387185467010533030479433649267694352037623853320142534162328343676180500842986939601656254160895720946249106801811590192121469830206609580901027508925554733336674357705629812578176156660836992651289651235737203982937744302004590169346673698783539247639045340829231770648411344563557922281764429314988146469420874383377765668701699918916432601540968166792541056197878520718135329654785533111947603028312995464940832818764160238696306303165468696424678784605327877701413866585266398298013473158460902271704256991496962010317190425006165690185334721554738638335169931859189179668444809013744260683557008503628214612402787875729566896039657446175252510866043943869335817272566205346880565604079469061527044899177698258978869795008238860254704666707320363413712167666602519686000343578575664376917455192436793553422273409198220378973850505371475024839356493818805120112178197004881798945752875627347023653925168174250675048609951955903060878397266139898217149394506981015555351419058916332727038535"), // atan 5.875
				new BugNum("1.4056476493802697809521934019958079881001980392225250914694378661427625409632993578391302747723584261010774792028811531006779355535554391938053474515274575184552217473798908623358968435195929527926267624761482657497065623919037738644432836480622700962641588831382563239906776255530165016403802920578117522905082366870993689726337996265941091098643146279476031017013855653887307414596972021305340088057610355853454310880017854621989969942452645245073612903073937704350021611423093198452042539143110342990917576977292238903652835576815434595470802311481366158075615355311473384506611515331318732191334991661454578046039341297179469581101729134060168631696089387357370686663967579805058104183392048589012532803518676815987395384247088026708040903332611058479330857157070824041350331034979260695412344871850482460344993184524341290596747552810965000775537369363763095626992937065779123987243934657124966988158644373300982117665221961098183203787224289344957422977216279846876394454094317395312160515764754"), // atan 6
				new BugNum("1.4089588955564736949699075250792569287155719419343882695947238478825504898922010056812200928913715000057342336913691935139416793925654127019400164652319522460253451066344390479441723915390547453869122352942825617059157654919255721513193105560506270533022371356126036631898040400683230165731782421511067365266618802409646521543752251369149248593690125758331975475771677471708098432506838937512845399549041000837126540815576060324101804118841515615394248367037303122784740567104252223940725384662648539220932385019979398563005552927568820035818136220509445963878238769531235667563191473242661691145033946854851258876268482612984586553768534232431509653435030683759798906394432430003186166966374566173353879380158948415140156268084097890643031157232198779840586742315525994765465255584797643216750017283307945168093315391505141390910627978271640578737236616376389148784587543448636891958699745922044127322936707784261723262080868943246483063432011697763608107455745978991778087634417856374699740187665781"), // atan 6.125
				new BugNum("1.4121410646084952153676136718584891599629948444422954671719401207303386722762425363982460375510087353612379407921354153961047030409848627311553585544220576443931209601524883906007263037100673752301478370023400692617762480370210282760974955266544853790871829346802124468584989214441711060612105317241655987944612427206916682426074011476873902290202396884683821165827793633351756619181798693253351990616326614210715059129762172939227136764607246190262505324169350568999265040295852391766359723858945700543597566503078990631871267130969871524552108946792981959130201955168969180114520120779650737239306249288070219888191538281255463819728326335523640794380972328066494153768431762952337064084517190797216720588773490587454985122796185759442946248094888505511896667164858959322604786960255283287832498641941859673125964102682761155574298036844810128105563173659868451526337587612773834058518385915846641608505899680914866434576382865307175819592009220843041584628611356375720395919355534778191808976015936"), // atan 6.25
				new BugNum("1.4152014988178669079462550975833894394929188441923487803170425907823895146961052935113438461569466586586835808767248269454201584780226444693015947674854829503313006376582176620932780416412499526568077056669123565738759359174469342584544211004501222652469933641764201228178459682473154705442867600679930789488248910460983426260311567043757031440356987637967438455339556152470875555638160173768652749405109851856005820830846943963527568616152050168296322163874744759199003409646496288323991133168855893048807911662234493924733435497193299113707824686859283295655476746276082823670802803134220864120976566865088427588858908244152606980695000616501922806539832611094296122839633633695180305194923950942995193449248907136627039197525685743990956046920085658023279286113400517483657672468750673323528901502011186939487794793382788077429975955369675369663494306981066372082252073196282331155157299525370765208331466571321191862462957657131687190518822033972924739004103035075190800571608336162075236183565325"), // atan 6.375
				new BugNum("1.4181469983996314594038603039700989523716153625526351821696013986625705326477714430373017291881374633947334362770209093961964425623973407854095159137845385812218864665001717068592947489407844355829252014586737057584002797498446570516379443282028408811348969539661344332399832317695442201108576734281285403276837145276400750581763442460958592971178662790420085697689109241846093186243173294443558518871417488296091455274652968223187810731492550995762808158667385574844965020028185343956571122831699937789452774075986343160923062677129391431805147630747494926563309079733025710100484294821681895260127170256459231779501887617263612421633210304621945131582563494693405412631251379244318019713015217867506560072075302915019497723307303562158648795272474878668585821304989118864934986755194892687580444329283423783616018525547334946973245857962130437451078131019075186617112852809575690960678641966381370284205821798275636482856984505906645594129892057290433059730596894708084742108026341712145820505523647"), // atan 6.5
				new BugNum("1.4209838702219992566633046424614466661175585904930327745794703303391953827742590244231559142651844371296526115992955514889294479521818723813265356742458377538219976447354219131623542810570077014457794524403834586151444407465552774557408774447638755209854157109736709130387986270492783512007449102261422588378600053172928234561004642586101582670464421235692461243263405778107185347297323684267068526979496747443111101953775751351817157757780877462853664983933298115949123992462849040140737177494909268840612491484437547748671958269485229379893260230102045066546833474408042037670020131366832153458455683835107199681842570405227652174236376255027639427284082179584324731092187842693702775064764270316975710969662136552091714531317351782649859013534803970883173179902981867665870427321495591468589767101370766943336672427721089556117052575812953128627402048652993018405351987773405415514412834020984530057327863523435821233642997033544440073651774791464237519884241484699189370751453154860070289854027893"), // atan 6.625
				new BugNum("1.4237179714064941189018190466107297503086186878448455584555376548738745430183286786901610466514180970433237831577566906090812976882205752430390612784169198721782647823260869884948412982954358863322726215057849241198059102688875005795959970655746651133656402004815540172975822581734567776104408789029106152238554988418397184195851659558398608328951896129929648283632320178814363880361088020422746480836387030426686055180489307508792747862004557497938546361681852714119051367313303131680753975970560958155947906195597365567023205135236074463120338192730404827867086815661970832459480023270064744140111532207758191804446545865274828031341463014620967316796616713748599234273982739874466127927547433376352982092191450211915538949201194724409275102363423176368520857033224344466559776342842910354303107367280015121186685043341689062919017719417867326232091337054717750194415210264135152580117748442235407118053415679172475505548412690002356554986038174454656786550673377180206875917195271406655427580060037"), // atan 6.75
				new BugNum("1.4263547484202526397918060597281265695725294431827608186257694391986209404573210603695677255705992439514898843700009708432385745832869819581255972397186361104742984830704985634115065648144125903582756876764560868694871597485247410608829003625399544048176507426810551849197178641555402289092931246922679339786977685370435730905979928974505967253700504383205956969801723620626878240178553470707586898460187214334273704731772323442744612285033673882746502638170442130026982914418894745123050906886485297027501569641184474966062008315238845226367989476150644884612512451778760120693170584944324416290895324621167069871462805428276044293482921434561803085022013246805059072379997071026963972230395644384456961056409051894049665893716577007148846465121539760136085573156021963624592268499791792502997486057344591141710687822592635057594613508223161593916090901656577506391008141951582175572742435819907594293647270521853338600730851819532916515876254497944039933293292217390469083089511705001104677958388526"), // atan 6.875
				new BugNum("1.4288992721907326964184700745371983590908029409590888381093422667904665763831733383698255510368120158735513603825800549583087470939129143628509584162081495966490405446966936877641642214913601051640786949866517571763724967603317017763720594622770312016691931585796075171486212808290489307882422604008248080941505938217631137662395229273941475907812259003486867443612316544786997205236579115458503572098258804751505016621748655401486341501036444998376604524843598501951146869263819410820360986692003296234768426976616606078422614128344000811473743887328289131118920967103037106933797958629918940244519415005619056374797722479742964521027561168055643389318003314585671738271010796189837406467858179974587018779456960691439307324673010702089021386551371207659758430674585535851966943212556232871937319273925263712829764002911942203916396431162326595391517464284833234733493428769813065211124058679949993429299210016326371159172724311886768193480656667419264732660610919254386486824426251714636671383289534"), // atan 7
				new BugNum("1.4313562697035588982240194668401779312121787143513753090349671075616079985316238619450535543824452286089475264732645560185478682475042248334027974456735209517876918274420977259625867610379139121493762007422194144244949434251597998310168750696330884512155927859838076660561986977218434208289350907084279073788232062043500204200834611993800614022819227360682078355990176742282541625624549645543374479832724952377843856939185893463812209186709960292809605533347146946179410095922769482383103749518330462462377985783820766353133694205732718534117566612016148361643385263742110655131303357086717274711798206550266798870346484339428304935058698792910051792588331041592674935177157816007428854466924919190871334563025036668998349927477917964565415458707547213309070947824456146250067862840567351943702168835755318319925746456441281263049809962155571787946546106156341584834276436245813220775893349133072858871216554715089232354207779399438334500494128788411590167511048719385336193547878898518368873627487867"), // atan 7.125
				new BugNum("1.4337301524847089866404719096698873648609738893518238120724909226734648548503205181796349227325395241517781298622561265592336540963252056724140272864612136648396278203345455417806957801294408901865873228203191399221767975543930205841225990795178066825781505139834301609520223202587835261654835205310740138137426963119405217700098380859515778542548709492559825036253129569353851988622280382843073259438305057451998056955443113859789199780641779932478804818425699266643539654217682614793630646485082474928298756808549681218337692075166898230200228155389672509222915652341597024034229053295637965054580112024955805213578365365328205560816488877390145748872033117697905493497707165901504772875244451492909129923700713276696926702058848075485063653437041657656777614200039619308426141191972573893107699959929316043879743085595752177186271103294477274589535515804057770624693404598046136137808110369561026203019687013482691725426105157574366016211808199954123575016602768862482008399737562685663517810086091"), // atan 7.25
				new BugNum("1.4360250423171655234964275337155008780674894602458475899131536843382675261035799100269751794558895958587675323732657178350672540492649311336493112268247272208220803534566254552595981599950457553407467251445025239169678319758087252866895580000027672719751436922878703742501397995129952977904602457683504199670593656476767933490706219731026031842217554988660689325648770332644360421717913781002944958456768600038726565597435904598795112068222471017555392618753239833724039224071285243263096899456443561769483611663187522988732687489922122414081110468574556518341257881880233752441971273797589531668022232224970204180729530809172816350090060157297598053913696836809458113758091732245809304286420345399423143157356437090063124823826066247532692861304487380246231457597516437336593416252868800913734307946471549654184605187913350661686720601949338201596924195077530325647140476556322777609261430631637691411577838352450126476175267981725869480929745233791328874583212998671906561132895753415073089088834079"), // atan 7.375
				new BugNum("1.4382447944982225979614042479354815855386179699976727094736870685116936688855982931769012394149135186074378304104378230792482790073418423120566944291196347950845238989046551700421528582798681404882638650981968020598343161429801413375553428494278218906655324787502620430129228387729934635023619431125162776284529349018736041796866275528678392668764325889310892682994318299384963185872451658800256084908038630183098484648712458130039943588767569797742149197618746420852835528930710036843783420006447285492681537846232686288057498711010654776918341161321390207024422975812343441944202300788223897580384452642613506347420808873569614419942452478330868652210368271346982053812488699900167179087337947829740492397891940198166945860876921203109407556118681994450006062406200615801030792728777520378469099414375157177914112328696698323284771576167963011331629143764180124000584540871328708384011748365940007708060248292447489855569821248562462607997781076178760790984627489962090859645486549305330168957339179"), // atan 7.5
				new BugNum("1.4403930189057632173997301031392126865694202756000711935988843804608136164697451532287485425512275282714412537010880036667379912266402124111672019262148581293836679326186125017424216465298865126256166880659318286220845504633142667846157436037457599855035344601077823305246062489285596091817305952082951956985198536152567508656355204428147604435635090841020543107298233007975553407104195648186238858462009990703323354343878501289433181398375787577556792893008697974387915757703879617752194325251759920553933805699284862258685578366223563560771054405004843320943585144881383373320242246943744037237981051916582772753431895402541693825275365473681035175416745550365959306203747024673512412824911505523000292621360633965308427619757620358676574042482037904152799142850906633643493468607367409711107166328109918815128710325100092454474065915029714704842941389673511623831169690596658166397801404403513611020332359029969725567562482050918527930482595652361463517455218425556603299997193177411646464816115947"), // atan 7.625
				new BugNum("1.4424730991091018200252920599377292525125426099089773770218283463939047353709770454207512145323586548351765391827906316912597393185712411869452308078644279542741953778167866329671821996501549546865439127867274988014653970129244747754020149849049532232490462739456641671025708827686156332380748489225475174538555735016733742970130352075682261520369977120570861860896067696084144135409113549677312450697033861465715537028767303596715335228418934232630280139774324863358501510446730936353125239468026010008455450295199605513467086545615892311228599807052243659191348112134583091128553411140510792768052894652542933129381854400680125350026542982121522324524302540616363368450423478745096444584714022560513744025790295932414866582465420068318302936841010665568959015213009322387562479153110994096389124121208674329427506924839238417864061336439599358493285520781540344970034401238161959556490696581814297718412012571549269180092161002679842396395839891650963285817514854567021946840744784208626258641778701"), // atan 7.75
				new BugNum("1.4444882097316563655148453598508037025938037611405153102333006430777548504124006427173909018609961178328362515693739061381900406809006656517403500571069449883285745242237963710755161762819196011757870722882779813665867961820639125404283064815458441454424160808792538720906575209098687833905634682705576769924149537562300760956155424016936828425355097393198215440742224530850085646832375162204372819150554416865485295960279635380540821076359609824226376441853523375298137182710408539991986357012128977738229078743535215512940567559047916235875053813420007263010353096129817760135273464744499932978057133574746372257132401774177443454096659279894766928947534323264100691682571530629259186000136964302810162212442185436571683273223150411823684936269682571795796239185328907591460913151167804959058100024197335765117002885978359949174752100330640812119525751077862849951146400595991746312877487739901387577818768459181108069324479598567216893896850110791506592341696980841928982616887638278825982030476559"), // atan 7.875
				new BugNum("1.4464413322481351841999668424758804165254145079177488205723581770381859357155377406903068183577052036646949919532027742797357592208068960691504359171925291701341180388419292333648987957622157075751812495553453708836411082907140223703558710768873849320927571288195385677248881447931562095769890905617714893507422610942922220112500993187077019816834299506146205555633331282045030125508217518729712484023850452239582700165537072841305941167385463392822698426664913477601500868847300547488407966775264386853781710149384103677636845031817190626706423097424735663497443020378945769219833551707756623034834942551683714930765556188683667857862872468369776641633049156627692143405945107579717045592131534148410037227602962164212995784692230558867483499407139248671629927266692367160836140136655250027086610743485307898274314371569501664581502057108872654186126692572879045637321130079095311624692049089572218927906960842800073540390174718726760681138222023044253993783398679499636607803466262346711191297109007"), // atan 8
				new BugNum("1.4483352693775551917970437843145232637694521898061148305143457248058225993994607248661700922446230853488043206682111607118379397542166564271691918026480662770637927712335576306259793707063450496876801527702871214455180531378377349232244277851227919847623525065092399989896522514202571476259797586073138824744185395677278585940129627815597329298557573970060284046381051170815043430490619088205398877203158556755175989539497206890207798431695358209114441445271683105888231392425533234199584198684030933358014049244690784695834267541618961392043229650029016983958076940925470596446739120758401820027553268276409098938296319668032790160363627904117956180772543343659515078436751379931067998520459544597076723596772256763771408865008557623628888114415379074633456789290326747001027005899523722986040649217686526573710563617239100170160935071653040873008487245597599958727972258799968467425302222814655351928657050042048370767749448481050166336309512418760802605816855359301111709168710621101088430716803053"), // atan 8.125
				new BugNum("1.4501726582147939000905940595923466567576107930761729332752105006022753509830291613631938493157098729536182900700424139930625999677486261856159365303217482121148889764724276320190741328780946967231485060861588546388767144742789862997331035667927437312176533030276218253166650560247909217000112428262212076300307849459348776680922475056530369493392941359428289546535873421063289900279508685263682018110102166021694169706574409841006680385850597751061707258943811924908328708589629841082446235520122875433699968557911592824860480867745066608786470900241634763668106325824431610097371833437486898101161203519846095645810961313087091656986659424082409673339149160730613319747996151975012578478674401883604564116865099811933914550879445233533487907903430989706626919747355450256550582710125048230655730155611218284032658441541396699147375753586109307669000585178103893585246640303649467745859723276132709040312999281876689874587019296466110171942247576493220169114540573632905864327412170253065403948169981"), // atan 8.25
				new BugNum("1.4519559822271314199339700039142990228105037174117263430860917329338825816582591900002872088718628220940002751575120085474856209125678546940025049330760327416979065156452398719937050331976534838631942254735380679340188603220216686626030663906429200091699851093573093507552934867263565592691844544560197210495536299235408408219783109740900635705213230461978689584578788031198690790678394176235676071254734104058894833404977634382668811465885187111535403632097630071519874624332426069951888532692541703075862437383070973867531854818672637630068884241830610843012920343237514412320597807052769684098440313245063282085590751889471826191465199781710227817874551504269034407054075061288803114686178659923356809575826996617703159211280622785818053317622613521734217721126240963758048006817872939497455686328716081985431366608460750407119700000893117192910143595732275934560292942792615671617560544713795246281111652793963598340411107424717651193315353510214186385175182543251645353561561986114768428236318493"), // atan 8.375
				new BugNum("1.4536875822280323362423034480994649820284804880860002245326750789716873097602637784225799031393836793730308094129656670110483901982897568220587579749476942760735498335305096256518677038148262865139640311993662673399774216774844898994417783106108225182452649568612722412282783007740670299389937759886811243045012956701762816480382477804255129098249804907879268343096738741695519814388362566120050023245939344400964707979714274876388319268907057453341446606973227401705688392671273637021238194551605153525315642708826297507083915587764487928890173265347376635892044052338897735539091094862397398393970031665874691452057442052817844593897337777754822494407155999192786275818426951346945521694041686879387448806754893551237204110750712667068531843689697529393460678260088321450622741130858304397770237968683777267029081449336062821971891109162719112015138680958660203940116800969641635088702991446382448487935320667383926243178675598113912259097071117844158561337196439086814202961211141611528219363190564"), // atan 8.5
				new BugNum("1.4553696664279718992423082296859928222270435537415427678666193219818640444473522759964442943545670957834894552503461613089409258513183021581727968963091637414417277609685966051921333834096524316415385567090019627684751123569171310151288885735691477973942596822496403531273984557201437263072201383836523468591480028755434935169069460129883684940391479758895167774114594924174137808994215863796785433538228261122795158146078527190833033033551738625744647664278627223900721252043828497358000465649726431875398151695884817454857197282813330808234336381237500589119746797738699841407094367441404427154364518697298624777613838320009498048176316675137460152967050502180986677528533551905120894371170298778690332806047319403665843810864644845693786292580165461157931466248857670283997788384298063453560126738324586451162574508879190235307382938020790022930666323045534980269919074456239169168379929019718087429586068117380966355437604796028726431395573765274148515885627995865703985806835804854975153349182264"), // atan 8.625
				new BugNum("1.4570043196511885530074841089245667532357531421878211979744493440665601385096172671452871610703351522841247803370873423044971641650231778429141295562539508498929953610522683119011140361111853693093298501978062228507338062282004504647812225081570040143229957930581879211938216229715703014682510853863835205029073637978113635465525816791358657698587556011405502838841586597929408752389131573925027137852415184239082495643468369977519528698749467731103426749584452065226988963564043252650357745268244964327958898088905708104636729337377526059181774665090239403760661851875301106921730156915898112571227670361703899024771804033722237506612487644224466001671606863810355548792482097416217529051699028814030719237633989285782751459211434714382204404897217100514247640238866781720627196705700779742731709496974795533282362652918567682956290029804555651553190351622079100058397200545617428306755892058298455089542144226871808768292624265238983966541446417805779018192903118066528636110766165959345070955224504"), // atan 8.75
				new BugNum("1.4585935117976422128825857356750737658038796237621116684910922342935339363067061995548088633217028517608217737711399570295664214653551159739693351620415665211211234436475585754635601694894842282809177973263141822922174803592138057542187573365410095386923706525168604482609541820983910270840078910205364005310966926730093511538691108689405883504822571484532676265159499466808324755696075119274365813562888558108955665122925759175483840274307182895383601976369219367394232613801895741299463559027892873468474773024117655686951863647478123387069614501925273470365789055500354265635013696667917852992508136321840795143404999852986111996856172119953030101571646881903189810145563243105161963365282637390138980813749821372152814546227480902368492641258637216717435846132655438395314459157917051782385191199142765129092590146447842677701424546257271821122517606205949571415459849477645975461155667383500967906073443046937720019973602041612943706524243453714181579441898823704699352013345050190343764208494042"), // atan 8.875
				new BugNum("1.4601391056210009726721818194296893361232986046844888783646578530462629974026057855487885232375705608795627714590580022926243478366971659626997995659151958164518579458804052590357849756123258600824522388750847714861376691335987898882735094387142938685149569232227259620556634573748896698209445908946032184960679638699569931514584655417261464284289570871665634543906091674361151775106636460419563306716999405135081895956438784279264714052269858222902980787633767220353644328464623669984777820298411790039742225463766215831326023662967892324472342297893741498960887241205900052482828707203454699158377790692214343716704370424274025398195433019923497224411219860119067758837322270074374146865065763180001862557811015719025263911839555516965548839038424798308109071827877385529145410880460809575495028515399384671616268538346259389200592543906766046350214079363070079992126412439627239237368467484489506755101932842447071817451186006531975324243673583272849061920107893625047683245855915344158386196881024"), // atan 9
				new BugNum("1.4616428638860188872060496086383008594309713272239488291444184030592897697622889169116200736452332862815073387802114289549720068308542146781929618645314587061853708501522492427335087036122222261260183971197156664151564629718741542013059303067839898151884333281728662284288141200493665366964903559381447791430613654117576137925552658485221471339689820713159989130910998469438379849531853875512031810791718095239497532632982093334596874646861544285236527538627363173223053784032076184187157616827211563658896688690426601098520174042014780299119161487241571200588862467477833595294712270872675467262719079048976331833775419062104212040193468533300371935304642796139122777066074435598174544512776220031359340357576321148226635335265497391484380810972236531935832077005694763492408928343000602251753578400022861048052326087957084735442862660298051164272599554602462487818221263345678435756848088654368808566090259931594209479624716768139642631228353986821234311310063698200944524064657280262277712328731252"), // atan 9.125
				new BugNum("1.4631064559620759326975975316301202111559746331116888399624889718090251101339971623362383817475872850941692250535685604455515847251605582928322787458028293192519600662987163777926250960238995539323857213163635431392171286037387856985952036729113730777236721313541861038554455866032520319619752984101045722789534429469087419434537036123336695965821272034153348856287676597030673882585976296777382661882882475784163070269996976071805586360759039191283722262326391798558694213664358367922935831632985356676080793039687140439812705452770804259507864590317645092620266961414703926408102952915087588932618593572249817015552890182442919111535446927575775479425975660282702380708456839017308364656660459781077251895033160496385921928783655529459461687248267050769535455122807346149108987356725417588106795102131388478589387267671623114146342982660788742597544787284401245068601857688082872109282087792178163209848409458361870202982316290216734934513880541288631151791481783838878871255196221815552270820338649"), // atan 9.25
				new BugNum("1.4645314639038178118428450961503371619177388755813934418179007109578552445337446953694134206297067469597054704549755100058656999223115269680865389937425835720462684468561663764028461077382146306147405994763254109774939683428950908649420819678211693945766653311335060090516056314484139116170043112791763437902202516220209460357923413762150682714420076145713219498551294880135993619698902134582564421843967322510237288182632619247498269827624988964467091877328754522669060337464116613903598397378651198991228552660109720502688049585581873158073967710373328722072929112652658548808679171387924512675465256684360115217007182587646144130697723056178074721298355709704420663926159271729756486344188902444005276486630479101955746214456194723636580839514163396807437578773519453445847150587506747576666601761627044420824879077590634102121387874631410906231448632863245218600696870128418755604428495313379137581784892355760580991727971774014949639118471652881420420842019578644970285680857662399679011707423467"), // atan 9.375
				new BugNum("1.4659193880646627234129855241049975398470233012823484263169380741884135231984921227566815379555960145053282584150412452033863476838974532102986862425446283820392295628723717633935295685064763307362504338508332656720764693457453201332193552228670860255628692756350785108309240974283537972606676162806059890172806223356738778396963295247980069935466003603018029130979488092774102405413924167779879709716048780518836736164532223065318476903474331582376876037242296177919224361774417843671422541256313594861740828831767568882225099495111139513041552191330275069803270547751954831350189688219617936042869286078807884696583403155897269558865842196422773532239058640769080350428963471886251125485969075598755746631913251180396855908112689941232818721101685123366366912521878142348862863758517679093756174418060457606974850071181668246100122933277740702545831739284349347782924233814971167148182532541199650159505243969484926869605712283809362186553427015695107426870143064430446143767456256378919743796264147"), // atan 9.5
				new BugNum("1.4672716522843522691530527207287398276196616828510536651614105784075862471524081260082179511608239031911137184378631014799364344515969399170870027375658372551372748648608203810714028229930779673910404062946496270692237736377543835123419416636229954446046521983454009220291696205001472627602927692994833959651745061213551805504842523577242935325997513257812409568054756590067605654260089082706339038821310582103046822948743921843523135823710419402731616868303960579373510031174799409471860083036246261007253499820956026830902209677464674194010366457239695712705991635823432309324960204343105548544846087927933418949297336851632048612147229780895115302677721148297944776677261050471541153633956421105189187542469452206619311908166149830581919175496293901574042354338586912383417840616255692456685590623537771129957601499179974048039249284550525035157228718272260840625587851939649711275687475310580079015657677223396337891318811119901500875893295351188517510122010646972256200363588204615818565084299771"), // atan 9.625
				new BugNum("1.4685896086876430842559640450619880951144496016050031433501703794191062437103294365134221905963604510763549040427577621005969720920630134190034245128251344925574481000014082541731050379840272100343362862631781358383493483969984879821772432344683879131806323925490386736871157774943522775366845263704685787599560050047576431452325257564593249802379911477794006003124757965301010008501634287288936839184615441752631755568698249288090278878729071766204667378770598173400491457923277389110600144633076308753692062928068164617106185199901602169869947383760362751533693114528696731611191026334765990895265139862686076335596372303428494830171172061812684419922007724124143512898819740091513421076388285797538210766668840969567168666944674980304400057626434227836082852799045771310272085024046223850300402250789269561036430215098024562014266226714528829882773090272239679364801495307380257758766350748928088363564349079920074402463411276010106295527243998944135708456861666367216140020361253560332024108812669"), // atan 9.75
				new BugNum("1.4698745421276027686510391411132998919793562490765925558017482618646766281585286393311937505671837591876446405654360396206736826251318497052751354742264123306056014602541161839009122644445729985615678393421187828577783786084888746281574482135529336465236754608687127458338433476108651161555268434213212282917949052832793268868040448544581660060834724455583675776435752636024192409934452720097774993333578901388226472978832259516534410234944041549529321050256622736951388143594865167358192135327156645906028596491105069329994804056918777382395093516428647975191200622417183746279561618918905533164892858448888695747180554942075874811031514930008941716996570561400666131370098613857300787916954682532419479996762281879674581659138608700837705336821519677433143928916358193665917814352606510946858509815361744747169004675301722673353864232137100029849660999491841161365641941327737570659867805298031761664984269573007520768824985386952233323444989494494289804739125222543986763095387950161662229022520526"), // atan 9.875
		};
		}
		#endregion
		#region #field# maxDepth 
		private static int maxDepth = 50;
		#endregion
		#region #field# maxVenom 
		private static BugInt maxVenom = BugInt.Pow(10, maxDepth);
		#endregion
		#region #field# maxChars 
		/// <summary>
		/// Максимальное количество выводимых в строку символов дроби) Значение больше MaxDepth не достижимо)
		/// </summary>
		/// <remarks>
		/// Как правило половина от дробной глубины числа эффективна при вычислении 
		/// значений сложных тригонометрических функций, затем и нужно это ограничение)
		/// Например, для вычисления квадратного корня, требуется вдвое больше число,
		/// но результат у него достоверный по всей вычисляемой длине дроби)
		/// </remarks>
		public static int MaxChars {
			get { return maxChars; }
			set { if (value < 0) value = +value; if (value > maxDepth) maxChars = maxDepth; else maxChars = value; }
		}
		private static int maxChars = maxDepth / 2;
		#endregion
		#region #field# PI 
		public static BugNum PI;
		#endregion
		#region #field# PId2 
		public static BugNum PId2;
		#endregion
		#region #field# PId4 
		public static BugNum PId4;
		#endregion
		#region #field# PId2x3 
		public static BugNum PId2x3;
		#endregion
		#region #field# PIx2 
		public static BugNum PIx2;
		#endregion
		#region #field# PIx4 
		public static BugNum PIx4;
		#endregion
		#region #new# (Value) 
		#region #through# 
#if TRACE
		[System.Diagnostics.DebuggerStepThrough]
#endif
		#endregion
		public BugNum(BugNum Value) : this(Value.Numer, Value.Venom) { }
		#endregion
		#region #new# (Numer, Venom) 
		/// <summary>Инициализация большого числа)</summary>
		/// <param name="Numer">Целое если Venom меньше или равен 0, в остальных случаях это делимое)</param>
		/// <param name="Venom">Делитель если больше или равен 1 и дробное если меньше или равен 0)</param>
		public BugNum(BugInt Numer, BugInt Venom) {
			if (Venom == 0) {
				Venom = 1;
			} else {
				var MV = maxVenom;
				if (Venom < 0) {
					if (Venom > MV) {
						var P = Venom / MV;
						if (P > 1) { Venom /= P; }
					}
					Numer = Venom + (Numer * MV);
					Venom = MV;
				} else if (Venom > MV) {
					var P = Venom / MV;
					if (P > 1) {
						Venom /= P;
						Numer /= P;
					}
				}
				if (Venom == 0) Venom = 1;
			}
			this.Numer = Numer;
			this.Venom = Venom;
		}
		#endregion
		#region #new# (#string # Value) 
		public BugNum(string Value) {
			if (Value == null || Value.Length == 0) { this.Venom = 0; this.Numer = 0; return; }
			char Char;
			var Length = Value.Length;
			if (Length == 3) {
				Char = Value[0];
				if (Char == 'n' || Char == 'N') {
					Char = Value[1];
					if (Char == 'a' || Char == 'A') {
						Char = Value[2];
						if (Char == 'n' || Char == 'N') { this.Venom = 0; this.Numer = 0; return; }
					} else if (Char == 'e' || Char == 'E') {
						Char = Value[2];
						if (Char == 'g' || Char == 'G') { this.Venom = 0; this.Numer = -1; return; }
					}
				} else if (Char == 'p' || Char == 'P') {
					Char = Value[1];
					if (Char == 'o' || Char == 'O') {
						Char = Value[2];
						if (Char == 's' || Char == 'S') { this.Venom = 0; this.Numer = 1; return; }
					}
				}
			}
			var Chars = new char[Length];
			var Split = -1;
			var Count = 0;
			var Minus = "";
			for (var Index = 0; Index < Length; Index++) {
				Char = Value[Index];
				if (Char == '-' && Count == 0) {
					Minus = "-";
				} else if (Char >= '0' && Char <= '9') {
					Chars[Count++] = Char;
				} else if (Split == -1 && (Char == '.' || Char == ',')) {
					Split = Count;
				}
			}
			if (Count == 0) { this.Venom = 0; this.Numer = 0; return; }
			if (Split == -1) { this.Numer = new BugInt(Minus + new string(Chars, 0, Count)); this.Venom = 1; return; }
			var Depth = Count - Split;
			while (Count > 0 && Depth > 0) { if (Chars[Count - 1] == '0') { Count--; Depth--; } else break; }
			if (Depth == 0) { this.Numer = new BugInt(Minus + new string(Chars, 0, Count)); this.Venom = 1; return; }
			if (Depth > maxDepth) { Depth = maxDepth; Count = Depth + Split; }
			this.Numer = new BugInt(Minus + new string(Chars, 0, Count)); this.Venom = BugInt.Pow(10, Depth);
		}
		#endregion
		#region #property# GcdNum 
		public BugNum GcdNum {
			get {
				var Numer = this.Numer;
				var Venom = this.Venom;
				var Minus = false;
				if (Numer != 0 && Venom != 0) {
					if (Numer < 0) { Numer = +Numer; Minus = true; }
					var Gcd = BugInt.Gcd(Numer, Venom);
					if (Gcd > 1) { Numer /= Gcd; Venom /= Gcd; }
				}
				if (Minus) Numer = -Numer;
				return new BugNum(Numer, Venom);
			}
		}
		public BugInt Gcd {
			get {
				return BugInt.Gcd(this.Numer, this.Venom);
			}
		}
		#endregion
		#region #method# GetGcd(Numer, Venom) 
		private static BugInt GetGcd(ref BugInt Numer, ref BugInt Venom) {
			var Num = Numer;
			var Ven = Venom;
			do { var X = Num % Ven; Num = Ven; Ven = X; } while (Ven != 0);
			Numer /= Num;
			Venom /= Num;
			return Num;
		}
		#endregion
		#region #method# Round(Count) 
		public BugNum Round(int Count) {
			var Numer = this.Numer;
			var Venom = this.Venom;
			if (Count == 0) return new BugNum(Numer / Venom, 1);
			if (Count < 0) {
				var Max = BugInt.Bit(-Count);
				if (Numer > Max) {
					var D = Venom / Max;
					if (D > 1) {
						Venom /= D;
						Numer /= D;
						if (Venom == 0) Venom = 1;
					}
				}
			} else {
				var Max = BugInt.Pow(10, Count);
				if (Venom > Max) {
					var D = Venom / Max;
					if (D > 1) {
						Venom /= D;
						Numer /= D;
					}
				}
			}
			return new BugNum(Numer, Venom);
		}
		#endregion
		#region #method# ToString 
		public override string ToString() {
			var Sign = "";
			var Numer = this.Numer;
			var Venom = this.Venom;
			if (Venom == 0) {
				if (Numer == 0) return "Nan";
				if (Numer < 0) return "Neg";
				return "Pos";
			}
			if (Numer < 0) { Numer = !Numer; Sign = "-"; }
			if (Venom > 0) {
				Sign += BugInt.DivMod(Numer, Venom, out var Num).ToString();
				Numer = Num * maxVenom / Venom;
				if (Numer > 0) {
					var Decimal = "";
					var Zeros = maxDepth - Numer.Digits;
					if (Zeros > 0) Decimal += new string('0', Zeros);
					Zeros = Numer.Zerone; if (Zeros < 0) Zeros = -Zeros;
					if (Zeros > 0) Numer /= BugInt.Pow(10u, Zeros);
					Decimal += Numer.ToString();
					if (Decimal.Length > maxChars) {
						Decimal = Decimal.Substring(0, maxChars);
						Zeros = Decimal.Length;
						while (Zeros > 0 && Decimal[Zeros - 1] == '0') Zeros--;
						if (Zeros < Decimal.Length) Decimal = Decimal.Substring(0, Zeros);
					}
					if (Decimal.Length > 0) {
						Sign += '.';
						Sign += Decimal;
					}
				}
			} else {
				Venom = !Venom;
				Sign += Numer.ToString();
				var Decimal = Venom.ToString();
				if (Decimal.Length > maxChars) {
					Decimal = Decimal.Substring(0, maxChars);
					var Zeros = Decimal.Length;
					while (Zeros > 0 && Decimal[Zeros - 1] == '0') Zeros--;
					if (Zeros < Decimal.Length) Decimal = Decimal.Substring(0, Zeros);
				}
				if (Decimal.Length > 0) {
					Sign += '.';
					Sign += Decimal;
				}
			}
			return Sign;
		}
		#endregion
		#region #operator# / 
		public static BugNum operator /(BugNum L, BugNum R) {
			if (R.Numer == 0) throw new System.DivideByZeroException("R");
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var Result = new BugNum(L.Numer * R.Venom, L.Venom * R.Numer);
			//if((LMinus && !RMinus) || (!LMinus && RMinus)) Result = -Result;
			if (LMinus ^ RMinus) Result = -Result;
			return Result;
		}
		public static BugNum operator /(BugNum L, int R) {
			if (R == 0) throw new System.DivideByZeroException("R");
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var Result = new BugNum(L.Numer, L.Venom * R);
			//if((LMinus && !RMinus) || (!LMinus && RMinus)) Result = -Result;
			if (LMinus ^ RMinus) Result = -Result;
			return Result;
		}
		#endregion
		#region #operator# % 
		public static BugNum operator %(BugNum L, BugNum R) {
			if (R.Numer == 0) throw new System.DivideByZeroException("R");
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var Result = new BugNum(L.Numer * R.Venom, L.Venom * R.Numer);
			Result = (L - new BugNum(Result.Numer - (Result.Numer % Result.Venom), Result.Venom) * R);
			if (LMinus) Result = R - Result;
			if (RMinus) Result = -Result;
			return Result;
		}
		public static BugNum operator %(BugNum L, int R) {
			if (R == 0) throw new System.DivideByZeroException("R");
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var Result = new BugNum(L.Numer, L.Venom * R);
			Result = (L - new BugNum(Result.Numer - (Result.Numer % Result.Venom), Result.Venom) * R);
			if (LMinus) Result = R - Result;
			if (RMinus) Result = -Result;
			return Result;
		}
		#endregion
		#region #operator# * 
		public static BugNum operator *(BugNum L, BugNum R) {
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var Result = new BugNum(L.Numer * R.Numer, R.Venom * L.Venom);
			//if((LMinus && !RMinus) || (!LMinus && RMinus)) Result = -Result;
			if (LMinus ^ RMinus) Result = -Result;
			return Result;
		}
		public static BugNum operator *(BugNum L, int R) {
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var Result = new BugNum(L.Numer * R, L.Venom);
			//if((LMinus && !RMinus) || (!LMinus && RMinus)) Result = -Result;
			if (LMinus ^ RMinus) Result = -Result;
			return Result;
		}
		#endregion
		#region #operator# - 
		public static BugNum operator -(BugNum L, BugNum R) {
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var OMinus = LMinus;
			BugNum Result;
			if (LMinus == RMinus) {
				if (L < R) {
					Result = new BugNum(R.Numer * L.Venom - L.Numer * R.Venom, L.Venom * R.Venom);
					OMinus = !OMinus;
				} else {
					Result = new BugNum(L.Numer * R.Venom - R.Numer * L.Venom, L.Venom * R.Venom);
				}
			} else {
				Result = new BugNum(L.Numer * R.Venom + R.Numer * L.Venom, L.Venom * R.Venom);
			}
			if (OMinus) Result = -Result;
			return Result;
		}
		#endregion
		#region #operator# + 
		public static BugNum operator +(BugNum L, BugNum R) {
			var LMinus = false;
			if (L < 0) { L = +L; LMinus = true; }
			var RMinus = false;
			if (R < 0) { R = +R; RMinus = true; }
			var OMinus = LMinus;
			BugNum Result;
			if (LMinus == RMinus) {
				Result = new BugNum(L.Numer * R.Venom + R.Numer * L.Venom, L.Venom * R.Venom);
			} else {
				if (L < R) {
					Result = new BugNum(R.Numer * L.Venom - L.Numer * R.Venom, L.Venom * R.Venom);
					OMinus = !OMinus;
				} else {
					Result = new BugNum(L.Numer * R.Venom - R.Numer * L.Venom, L.Venom * R.Venom);
				}
			}
			if (OMinus) Result = -Result;
			return Result;
		}
		#endregion
		#region #method# Pow(L, E) 
		public static BugNum Pow(BugNum L, int E) {
			if (L.Numer == 0) return L;
			if (E < 0) {
				BugInt numerator = L.Numer;
				BugInt numerator2 = BugInt.Pow(L.Venom, +E);
				BugInt denominator = BugInt.Pow(numerator, +E);
				return new BugNum(numerator2, denominator);
			}
			BugInt numerator3 = BugInt.Pow(L.Numer, E);
			BugInt denominator2 = BugInt.Pow(L.Venom, E);
			return new BugNum(numerator3, denominator2);
		}
		#endregion
		#region #implicit operator# (#double # Value) 
		#region #through# 
#if TRACE
		[System.Diagnostics.DebuggerStepThrough]
#endif
		#endregion
		public static implicit operator BugNum(double Value) {
			return new BugNum(Value);
		}
		#endregion
		#region #new# (Value) 
		#region #new# (#int # Value) 
		public BugNum(int Value) {
			this.Numer = Value;
			this.Venom = 1;
		}
		#endregion
		#region #new# (#uint # Value) 
		public BugNum(uint Value) {
			this.Numer = Value;
			this.Venom = 1;
		}
		#endregion
		#region #new# (#long # Value) 
		public BugNum(long Value) {
			this.Numer = Value;
			this.Venom = 1;
		}
		#endregion
		#region #new# (#ulong # Value) 
		public BugNum(ulong Value) {
			this.Numer = Value;
			this.Venom = 1;
		}
		#endregion
		#region #new# (#double # Value) 
		public BugNum(double Value) {
			var Minus = false;
			if (Value < 0) { Value = +Value; Minus = true; }
			var Num = new BugInt(0);
			var Cnt = 0;
			while (Value >= 1) {
				Value /= 10;
				Cnt++;
			}
			while (Cnt > 0) {
				Value *= 10;
				var Int = (int)Value;
				Num *= 10;
				Num += Int;
				Value -= Int;
				Cnt--;
			}
			var Pow = 0;
			while (Value > 0) {
				Pow++;
				Num *= 10;
				Value *= 10;
				var I = (uint)Value;
				Num += I;
				Value -= I;
			}
			this.Numer = Minus ? -Num : Num;
			this.Venom = BugInt.Pow(10, Pow);
		}
		#endregion
		#endregion
		#region #operator# - (#struct # Value) 
		#region #through# 
#if TRACE
		[System.Diagnostics.DebuggerStepThrough]
#endif
		#endregion
		/// <summary>Оператор возвращает отридцательное значение в любом случае)</summary>
		public static BugNum operator -(BugNum Value) {
			return new BugNum(-Value.Numer, Value.Venom);
		}
		#endregion
		#region #operator# ! (#struct # Value) 
		/// <summary>Оператор возвращает значение с инвертированным знаком числа)</summary>
		#region #through# 
#if TRACE
		[System.Diagnostics.DebuggerStepThrough]
#endif
		#endregion
		public static BugNum operator !(BugNum Value) {
			return new BugNum(!Value.Numer, Value.Venom);
		}
		#endregion
		#region #operator# + (#struct # Value) 
		#region #through# 
#if TRACE
		[System.Diagnostics.DebuggerStepThrough]
#endif
		#endregion
		/// <summary>Оператор возвращает положительное значение в любом случае)</summary>
		public static BugNum operator +(BugNum Value) {
			return new BugNum(+Value.Numer, Value.Venom);
		}
		#endregion
		#region #method# SqrtDebug(S) 
		public static BugNum SqrtDebug(BugNum S) {
			if (S == 0) return 0; if (S < 0) return 1;
			var SS = S.Numer;
			var VV = S.Venom;
			var Depth = maxDepth;
			var Ret = SS / VV;
			var V = Ret;
			if (V > 1) {
				var T = V;
				var X = V / 2u;
				while (T > X) { T = X; X = (X + (V / X)) / 2u; }
				Ret = T;
			}
			var VenomInt = ((BugNum)VV);
			var VVV = BugInt.Pow(10, Depth);
			var D = Depth;
			while (--D >= 0) {
				Ret *= 10;
				VenomInt /= 100;
				var SSS = (BugInt)(SS / VenomInt);
				var A = 5u;
				var B = 3u;
				var C = 1u;
				var M = 0u;
				for (var I = 0; I < 4; I++) {
					var MA = M + A;
					var RM = Ret + MA;
					if ((RM * RM) <= SSS) { M = MA; }
					A = B; B = C;
				}
				Ret += M;
			}
			return new BugNum(Ret, VVV);
		}
		#endregion
		#region #method# Sqrt(X, Y, Depth = MaxDepth) 
		public static BugNum Sqrt(BugNum X, BugNum Y) {
			var S = X * X + Y * Y;
			if (S == 0) return 0; if (S < 0) return 1;
			var SS = S.Numer;
			var VV = S.Venom;
			var Depth = maxDepth;
			var SV = SS * BugInt.Pow(10, Depth * 2) / VV;
			if (SV > 1) {
				var TT = SV;
				var XX = SV / 2u;
				while (TT != XX) { TT = XX; XX = (XX + (SV / XX)) / 2u; }
				SS = TT;
			}
			return new BugNum(SS, BugInt.Pow(10, Depth));
		}
		#endregion
		#region #method# Sqrt(S, Depth = MaxDepth) 
		public static BugNum Sqrt(BugNum S) {
			if (S == 0) return 0; if (S < 0) return 1;
			var SS = S.Numer;
			var VV = S.Venom;
			var Depth = maxDepth;
			var SV = SS * BugInt.Pow(10, Depth * 2) / VV;
			if (SV > 1) {
				var TT = SV;
				var XX = SV / 2u;
				while (TT != XX) { TT = XX; XX = (XX + (SV / XX)) / 2u; }
				SS = TT;
			}
			return new BugNum(SS, BugInt.Pow(10, Depth));
		}
		#endregion
		#region #operator # == (#struct # L, #struct # R) 
		public static bool operator ==(BugNum L, BugNum R) {
			return L.Numer * R.Venom == R.Numer * L.Venom;
		}
		#endregion
		#region #operator # != (#struct # L, #struct # R) 
		public static bool operator !=(BugNum L, BugNum R) {
			return L.Numer * R.Venom != R.Numer * L.Venom;
		}
		#endregion
		#region #operator # > (#struct # L, #struct # R) 
		public static bool operator >(BugNum L, BugNum R) {
			return L.Numer * R.Venom > R.Numer * L.Venom;
		}
		#endregion
		#region #operator # >= (#struct # L, #struct # R) 
		public static bool operator >=(BugNum L, BugNum R) {
			return L.Numer * R.Venom >= R.Numer * L.Venom;
		}
		#endregion
		#region #operator # < (#struct # L, #struct # R) 
		public static bool operator <(BugNum L, BugNum R) {
			return L.Numer * R.Venom < R.Numer * L.Venom;
		}
		#endregion
		#region #operator # <= (#struct # L, #struct # R) 
		public static bool operator <=(BugNum L, BugNum R) {
			return L.Numer * R.Venom <= R.Numer * L.Venom;
		}
		#endregion
		#region #explicit operator # BugInt(BugNum L) 
		public static explicit operator BugInt(BugNum L) {
			return L.Numer / L.Venom;
		}
		#endregion
		#region #explicit operator # BugNum(BugInt L)
		public static implicit operator BugNum(BugInt L) {
			return new BugNum(L, 1);
		}
		#endregion
		#region #explicit operator # BugNum(#int # L)
		public static implicit operator BugNum(int L) {
			return new BugNum(L, 1);
		}
		#endregion
		#region #method# Rotate(CX, CY, BX, BY, AR, ED) 
		/// <summary>Поворачивает координаты вокруг центра по корню четверти круга
		/// где 90 градусов равно значению 1.0 а 360 градусов равно значению 4.0)</summary>
		/// <param name="CX">Центр по оси X)</param>
		/// <param name="CY">Центр по оси Y)</param>
		/// <param name="BX">Старт и возвращаемый результат поворота по оси X)</param>
		/// <param name="BY">Старт и возвращаемый результат поворота по оси Y)</param>
		/// <param name="AR">Корень четверти от 0.0 до 4.0 отрицательная в обратную сторону)</param>
		public static bool Rotate(BugNum CX, BugNum CY, ref BugNum BX, ref BugNum BY, BugNum AR) {
			var ED = maxDepth * 2;
			if (AR == 0) return false;
			var D = ED;
			var Len = Sqrt(CX - BX, CY - BY);
			if (Len == 0) return false;
			int R = (int)AR;
			if (R < 0) { AR = R - AR; R = R % 4 + 4; } else { AR = AR - R; R = R % 4; }
			var MX = BX; var MY = BY;
			if (R == 1) { MX = CY - BY + CX; MY = BX - CX + CY; } // 90
			else if (R == 2) { MX = CX - BX + CX; MY = CY - BY + CY; } // 180
			else if (R == 3) { MX = BY - CY + CX; MY = CX - BX + CY; } // 270
			var EX = BX; var EY = BY; BX = MX; BY = MY;
			if (AR > 0 && R >= 0 && R < 3) { EX = CY - MY + CX; EY = MX - CX + CY; } // 90
			while (AR > 0 && AR < 1 && ED > 0) {
				var L = Sqrt(MX - EX, MY - EY);
				if (L == 0) break;
				var ll = L / 2;
				if (AR < new BugNum(1, 2)) {
					EX = MX + (EX - MX) / L * ll;
					EY = MY + (EY - MY) / L * ll;
					ll = Sqrt(CX - EX, CY - EY);
					EX = CX + (EX - CX) / ll * Len;
					EY = CY + (EY - CY) / ll * Len;
					AR = AR * 2;
					BX = EX;
					BY = EY;
				} else {
					MX = EX + (MX - EX) / L * ll;
					MY = EY + (MY - EY) / L * ll;
					ll = Sqrt(CX - MX, CY - MY);
					MX = CX + (MX - CX) / ll * Len;
					MY = CY + (MY - CY) / ll * Len;
					AR = (AR - new BugNum(1, 2)) * 2; BX = MX; BY = MY;
				}
				ED--;
			}
			return true;
		}
		#endregion
		#region #method# GetAR(CX, CY, BX, BY, AX, AY, ED) 
		/// <summary>Возвращает корень поворота от 0.0 до 4.0)</summary>
		/// <param name="CX">Центр по оси X)</param>
		/// <param name="CY">Центр по оси Y)</param>
		/// <param name="BX">Старт по оси X)</param>
		/// <param name="BY">Старт по оси Y)</param>
		/// <param name="AX">Конец по оси X)</param>
		/// <param name="AY">Конец по оси Y)</param>
		/// <returns>Возвращает корень поворота от 0.0 до 4.0)</returns>
		/// <exception cref="System.InvalidProgramException">
		/// Возникает в случае непредусмотренного состояния, требует исправления)</exception>
		public static BugNum GetAR(BugNum CX, BugNum CY, BugNum BX, BugNum BY, BugNum AX, BugNum AY) {
			var ED = maxDepth * 2;
			var D = ED;
			var BL = Sqrt(CX - BX, CY - BY);
			if (BL == 0) return 0;
			var AL = Sqrt(CX - AX, CY - AY);
			if (AL == 0) return 0;
			AX = CX + (AX - CX) / AL * BL;
			AY = CY + (AY - CY) / AL * BL;
			AL = Sqrt(CX - AX, CY - AY);
			var X1 = CY - BY + CX; var Y1 = BX - CX + CY; // 90
			var X2 = CX - BX + CX; var Y2 = CY - BY + CY; // 180
			var X3 = BY - CY + CX; var Y3 = CX - BX + CY; // 270
			var L0 = Sqrt(BX - AX, BY - AY);
			var L1 = Sqrt(X1 - AX, Y1 - AY);
			var L2 = Sqrt(X2 - AX, Y2 - AY);
			var L3 = Sqrt(X3 - AX, Y3 - AY);
			BugNum R = 0, MX = 0, MY = 0, EX = 0, EY = 0;
			if (L0 < L2 && L0 < L3 && L1 < L2 && L1 <= L3) {
				R = 0; MX = BX; MY = BY; EX = X1; EY = Y1;
			} else if (L1 < L3 && L1 < L0 && L2 < L3 && L2 <= L0) {
				R = 1; MX = X1; MY = Y1; EX = X2; EY = Y2; L0 = L1; L1 = L2;
			} else if (L2 < L0 && L2 < L1 && L3 < L0 && L3 <= L1) {
				R = 2; MX = X2; MY = Y2; EX = X3; EY = Y3; L0 = L2; L1 = L3;
			} else if (L3 < L1 && L3 < L2 && L0 < L1 && L0 <= L2) {
				R = 3; MX = X3; MY = Y3; EX = BX; EY = BY; L1 = L0; L0 = L3;
			} else { throw new System.InvalidProgramException(); }
			BugNum AR = 1;
			while (L0 > 0 && (L2 = Sqrt(MX - EX, MY - EY)) > 0) {
				AR /= 2;
				L3 = L2 / 2;
				BX = MX + (EX - MX) / L2 * L3;
				BY = MY + (EY - MY) / L2 * L3;
				L2 = Sqrt(CX - BX, CY - BY);
				BX = CX + (BX - CX) / L2 * BL;
				BY = CY + (BY - CY) / L2 * BL;
				L3 = Sqrt(AX - BX, AY - BY);
				if (L0 < L1) {
					if (EX == BX && EY == BY) break; if (L1 <= L3) break;
					EX = BX; EY = BY; L1 = L3;
				} else {
					if (MX == BX && MY == BY) break; if (L0 <= L3) break;
					MX = BX; MY = BY; L0 = L3; R += AR;
				}
				ED--;
			}
			return R;
		}
		#endregion
		#region #field# TAtanArray 
		public static BugNum[] TAtanArray;
		#endregion
		#region #method# TAtanOfTan2(Y, X) 
		public static BugNum TAtanOfTan2(BugNum Y, BugNum X) {
			if (X == 0) {
				if (Y == 0) return 0;
				else if (Y > 0) return PId2; else return -PId2;
			}
			var A = TAtanOfTan(Y / X);
			if (X < 0) {
				if (Y >= 0) A += PI; else A -= PI;
			}
			return A;
		}
		#endregion
		#region #method# TAtanOfTan(X, O) 
		/// <summary>Функция возвращает обратный тангенс угла с проверкой и уточнением тангенсом)</summary>
		public static BugNum TAtanOfTan(BugNum X, System.Action<BugNum, int> O) {
			if (X == 0) return 0;
			var M = false;
			if (X < 0) { X = +X; M = true; }
			var A1 = X < new BugNum(3, 4);
			var R = TAtan1(X, A1);
			O(R, 0);
			var tan = TTan(R);
			var dif = X - tan;
			BugNum E = R;
			BugNum sum = dif;
			BugNum pre = 0;
			BugNum nex = R;
			while (dif > 0 && pre != nex) {
				pre = nex;
				E = TAtan1(X + sum, A1);
				O(M ? -E : +E, EqualDigits(R, E));
				R = E;
				nex = E;
				tan = TTan(E);
				dif = X - tan;
				sum += dif;
			}
			pre = 0;
			nex = R;
			while (dif < 0 && pre != nex) {
				pre = nex;
				E = TAtan1(X + sum, A1);
				O(M ? -E : +E, EqualDigits(R, E));
				R = E;
				nex = E;
				tan = TTan(E);
				dif = X - tan;
				sum += dif;
			}
			pre = 0;
			nex = R;
			while (dif > 0 && pre != nex) {
				pre = nex;
				E = TAtan1(X + sum, A1);
				O(M ? -E : +E, EqualDigits(R, E));
				R = E;
				nex = E;
				tan = TTan(E);
				dif = X - tan;
				sum += dif;
			}
			return M ? -R : +R;
		}
		#endregion
		#region #method# TAtanOfTan(X) 
		/// <summary>Функция возвращает обратный тангенс угла с проверкой и уточнением тангенсом)</summary>
		public static BugNum TAtanOfTan(BugNum X) {
			if (X == 0) return 0;
			var M = false;
			if (X < 0) { X = +X; M = true; }
			var A1 = X < new BugNum(3, 4);
			var R = TAtan1(X, A1);
			var tan = TTan(R);
			var dif = X - tan;
			BugNum sum = dif;
			BugNum pre = 0;
			BugNum nex = R;
			while (dif > 0 && pre != nex) {
				pre = nex;
				R = TAtan1(X + sum, A1);
				nex = R;
				tan = TTan(R);
				dif = X - tan;
				sum += dif;
			}
			pre = 0;
			nex = R;
			while (dif < 0 && pre != nex) {
				pre = nex;
				R = TAtan1(X + sum, A1);
				nex = R;
				tan = TTan(R);
				dif = X - tan;
				sum += dif;
			}
			pre = 0;
			nex = R;
			while (dif > 0 && pre != nex) {
				pre = nex;
				R = TAtan1(X + sum, A1);
				nex = R;
				tan = TTan(R);
				dif = X - tan;
				sum += dif;
			}
			return M ? -R : +R;
		}
		#endregion
		#region #method# TAtan(X) 
		/// <summary>Функция возвращает обратный тангенс угла)</summary>
		public static BugNum TAtan(BugNum X) {
			if (X == 0) return 0;
			var M = false;
			if (X < 0) { X = +X; M = true; }
			var RX = X;
			var L = false;
			var Y = 0;
			BugNum R = 0;
			if (X >= 10) { L = true; X = 1.0 / X; goto Next; }
			Y = (int)(X * 8);
			if (Y < 0) Y++;
			var XX = Y / new BugNum(8);
			X = (X - XX) / (X * XX + 1);
		Next:
			XX = X * X;
			var C = (((13852575 * XX + 216602100) * XX + 891080190) * XX + 1332431100) * XX + 654729075;
			var B = ((((893025 * XX + 49116375) * XX + 425675250) * XX + 1277025750) * XX + 1550674125) * XX + 654729075;
			R += (C / B) * X;
			if (Y > 0) {
				R += Atan0125[--Y];
			}
			if (L) R = PId2 - R;
			return M ? -R : R;
		}
		#endregion
		#region #method# TAtan1(X) 
		private static BugNum TAtan1(BugNum X, bool A) {
			if (X == BugNum.Zer) return BugNum.Zer;
			var M = false;
			if (X < BugNum.Zer) { X = +X; M = true; }
			var I = false;
			if ((A && X > BugNum.One) || (!A && X > BugNum.V05)) { X = BugNum.One / X; I = true; }
			var XX = X * X;
			var C = (((13852575 * XX + 216602100) * XX + 891080190) * XX + 1332431100) * XX + 654729075;
			var B = ((((893025 * XX + 49116375) * XX + 425675250) * XX + 1277025750) * XX + 1550674125) * XX + 654729075;
			var R = (C / B) * X;
			if (I) R = PId2 - R;
			return M ? -R : R;
		}
		#endregion
		#region #method# TAtan2(Y, X) 
		public static BugNum TAtan2(BugNum Y, BugNum X) {
			if (X == 0) {
				if (Y == 0) return 0;
				else if (Y > 0) return PId2; else return -PId2;
			}
			var A = TAtan(Y / X);
			if (X < 0) {
				if (Y >= 0) A += PI; else A -= PI;
			}
			return A;
		}
		#endregion
		#region #method# TAsin(X) 
		public static BugNum TAsin(BugNum X) {
			if (X < 0) X = +X;
			if (X > 1) return 1;
			return TAtan2(X, Sqrt(1 - X * X, 17));
		}
		#endregion
		#region #method# TCos(X) 
		public static BugNum TCos(BugNum X) {
			if (X < 0) { X = +X; }
			if (X > PIx2) {
				var XP = X / PIx2;
				X = PIx2 * (XP - (int)XP);
			}
			var M = (X > PId2 && X <= PId2x3);
			var XX = X * X;
			var XXX = XX;
			var R = 1 - (XX / 2);
			var I = 0;
			var J = 0;
			var maxVenom = BugNum.maxVenom;
			var Max = SinCosTanLow > maxVenom ? SinCosTanMax : SinCosTanGen(maxVenom);
			var Div = SinCosTanDiv;
			var One = BugNum.One;
			while (I++ < Max) {
				var XXA = XXX *= XX;
				var A = Div[J++];
				XXA /= A;
				R += XXA;
				if (I == Max) { break; }
				if (A > maxVenom) { break; }
				var XXB = XXX *= XX;
				var B = Div[J++];
				XXB /= B;
				R -= XXB;
			}
			if (R < 0) R = +R;
			if (M) R = -R;
			return R;
		}
		#endregion
		#region #method# TSin(X) 
		public static BugNum TSin(BugNum X) {
			X -= PId2;
			if (X < 0) { X = +X; }
			if (X > PIx2) {
				var XP = X / PIx2;
				X = PIx2 * (XP - (int)XP);
			}
			var M = (X > PId2 && X <= PId2x3);
			var XX = X * X;
			var XXX = XX;
			var R = 1 - (XX / 2);
			var I = 0;
			var J = 0;
			var maxVenom = BugNum.maxVenom;
			var Max = SinCosTanLow > maxVenom ? SinCosTanMax : SinCosTanGen(maxVenom);
			var Div = SinCosTanDiv;
			var One = BugNum.One;
			while (I++ < Max) {
				var XXA = XXX *= XX;
				var A = Div[J++];
				XXA /= A;
				R += XXA;
				if (I == Max) { break; }
				if (A > maxVenom) { break; }
				var XXB = XXX *= XX;
				var B = Div[J++];
				XXB /= B;
				R -= XXB;
			}
			if (R < 0) R = +R;
			if (M) R = -R;
			return R;
		}
		#endregion
		#region #method# TSinCos(X) 
		public static void TSinCos(BugNum X, out BugNum Sin, out BugNum Cos) {
			var S = false;
			var C = new BugNum(0);
		Next:
			if (S) X -= PId2;
			var x = X;
			if (x < 0) { x = -x; }
			if (x > PIx2) {
				var XP = x / PIx2;
				x = PIx2 * (XP - (int)XP);
			}
			var M = (x > PId2 && x <= PId2x3);
			var XX = x * x;
			var XXX = XX;
			var R = 1 - (XX / 2);
			var I = 0;
			var J = 0;
			var maxVenom = BugNum.maxVenom;
			var Max = SinCosTanLow > maxVenom ? SinCosTanMax : SinCosTanGen(maxVenom);
			var Div = SinCosTanDiv;
			var One = BugNum.One;
			while (I++ < Max) {
				var XXA = XXX *= XX;
				var A = Div[J++];
				XXA /= A;
				R += XXA;
				if (I == Max) { break; }
				if (A > maxVenom) { break; }
				var XXB = XXX *= XX;
				var B = Div[J++];
				XXB /= B;
				R -= XXB;
			}
			if (R < 0) R = +R;
			if (M) R = -R;
			if (!S) { C = R; S = true; goto Next; }
			Cos = C;
			Sin = R;
		}
		#endregion
		#region #method# TTan(X) 
		public static BugNum TTan(BugNum X) {
			if (X == 0) return 0;
			var S = false;
			BugNum C = 0;
		Next:
			if (S) X -= PId2;
			var x = X;
			if (x < 0) { x = +x; }
			if (x > PIx2) {
				var XP = x / PIx2;
				x = PIx2 * (XP - (int)XP);
			}
			var M = (x > PId2 && x <= PId2x3);
			var XX = x * x;
			var XXX = XX;
			var R = 1 - (XX / 2);
			var I = 0;
			var J = 0;
			var maxVenom = BugNum.maxVenom;
			var Max = SinCosTanLow > maxVenom ? SinCosTanMax : SinCosTanGen(maxVenom);
			var Div = SinCosTanDiv;
			var One = BugNum.One;
			while (I++ < Max) {
				var XXA = XXX *= XX;
				var A = Div[J++];
				XXA /= A;
				R += XXA;
				if (I == Max) { break; }
				if (A > maxVenom) { break; }
				var XXB = XXX *= XX;
				var B = Div[J++];
				XXB /= B;
				R -= XXB;
			}
			if (R < 0) R = +R;
			if (M) R = -R;
			if (!S) { C = R; S = true; goto Next; }
			R /= C;
			return R;
		}
		#endregion
		#region #method# TCot(X) 
		public static BugNum TCot(BugNum X) {
			return (1.0 / TTan(X));
		}
		#endregion
		#region #int # #explicit operator # (#struct # V)
		public static explicit operator int(BugNum V) {
			return (int)(V.Numer / V.Venom);
		}
		#endregion
		#region #uint # #explicit operator # (#struct # V)
		public static explicit operator uint(BugNum V) {
			return (uint)(V.Numer / V.Venom);
		}
		#endregion
		#region #long # #explicit operator # (#struct # V)
		public static explicit operator long(BugNum V) {
			return (long)(V.Numer / V.Venom);
		}
		#endregion
		#region #ulong # #explicit operator # (#struct # V)
		public static explicit operator ulong(BugNum V) {
			return (ulong)(V.Numer / V.Venom);
		}
		#endregion
		#region #double # #explicit operator # (#struct # V)
		public static explicit operator double(BugNum V) {
			return V.Double;
		}
		#endregion
		#region #get# Double 
		public double Double {
			get {
				var Minus = false;
				var Numer = this.Numer;
				if (Numer < 0) { Numer = -Numer; Minus = true; }
				var Venom = this.Venom;
				if (Venom == 0) {
					if (Numer == 0) return double.NaN;
					if (Numer < 0) return double.NegativeInfinity;
					return double.PositiveInfinity;
				}
				var R = 0.0;
				if (Venom > 0) {
					var Int = BugInt.DivMod(Numer, Venom, out var Num);
					Numer = Num * maxVenom / Venom;
					var Zeros = maxDepth - Numer.Digits;
					R = Numer.ToDouble();
					while (Zeros-- > 0) {
						R /= 10;
					}
					if (Int > 0) R += (ulong)Int;
				} else {
					R = (!Venom).ToDouble();
					if (Numer > 0) R += (ulong)Numer;
				}
				if (Minus) R = -R;
				return R;
			}
		}
		#endregion
		#region #get# DoubleNum 
		public BugNum DoubleNum {
			get {
				return (BugNum)Double;
			}
		}
		#endregion
		#region #method# Rotate1(CX, CY, BX, BY, AR) 
		/// <summary>Поворачивает координаты #double# вокруг центра по корню четверти круга
		/// где 90 градусов равно значению 0.25, а 360 градусов равно значению 1)</summary>
		/// <param name="CX">Центр по оси X)</param>
		/// <param name="CY">Центр по оси Y)</param>
		/// <param name="BX">Старт и возвращаемый результат поворота по оси X)</param>
		/// <param name="BY">Старт и возвращаемый результат поворота по оси Y)</param>
		/// <param name="AR">Корень четверти от 0.0 до 1.0 отрицательная в обратную сторону)</param>
		public static void Rotate1(BugNum CX, BugNum CY, ref BugNum BX, ref BugNum BY, BugNum AR) {
			if (AR == 0) return;
			var TX = BX - CX;
			var TY = BY - CY;
			if (TX == 0 && TY == 0) return;
			var PI = PIx2 * AR;
			TSinCos(PI, out var SiN, out var CoS);
			var X = (CoS * TX - SiN * TY + CX);
			var Y = (SiN * TX + CoS * TY + CY);
			BX = X;
			BY = Y;
		}
		#endregion
		#region #method# GetaR1(CX, CY, BX, BY, AX, AY) 
		/// <summary>Возвращает корень поворота от 0.0 до 1.0)</summary>
		/// <param name="CX">Центр по оси X)</param>
		/// <param name="CY">Центр по оси Y)</param>
		/// <param name="BX">Старт по оси X)</param>
		/// <param name="BY">Старт по оси Y)</param>
		/// <param name="AX">Конец по оси X)</param>
		/// <param name="AY">Конец по оси Y)</param>
		/// <returns>Возвращает корень поворота от 0.0 до 1.0)</returns>
		public static BugNum GetaR1(BugNum CX, BugNum CY, BugNum BX, BugNum BY, BugNum AX, BugNum AY) {
			var R = (new BugNum(1, 2) / PI) * (TAtan2(AY - CY, AX - CX) - TAtan2(BY - CY, BX - CX));
			if (R < 0) R += 1;
			return R;
		}
		#endregion
		#region #method# EqualDigits(L, R) 
		public static int EqualDigits(BugNum L, BugNum R) {
			var LS = L.ToString();
			var RS = R.ToString();
			var C = LS.Length;
			var RC = RS.Length;
			if (C > RC) C = RC;
			var I = 0;
			while (I < C) { if (LS[I] == RS[I]) I++; else break; }
			return I;
		}
		#endregion
	}
}